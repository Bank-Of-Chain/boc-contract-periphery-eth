{"metadata":"{\"defaultCompiler\":{\"version\":\"0.6.12\"},\"sources\":{\"contracts/eth/strategies/aave/AaveWETHstETHStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"../../enums/ProtocolEnum.sol\\\";\\r\\nimport \\\"../ETHBaseStrategy.sol\\\";\\r\\nimport \\\"../../../external/aave/ILendingPool.sol\\\";\\r\\nimport \\\"../../../external/aave/DataTypes.sol\\\";\\r\\nimport \\\"../../../external/aave/UserConfiguration.sol\\\";\\r\\nimport \\\"../../../external/aave/ILendingPoolAddressesProvider.sol\\\";\\r\\nimport \\\"../../../external/aave/IPriceOracleGetter.sol\\\";\\r\\nimport \\\"../../../external/curve/ICurveLiquidityFarmingPool.sol\\\";\\r\\nimport \\\"../../../external/weth/IWeth.sol\\\";\\r\\n\\r\\ncontract AaveWETHstETHStrategy is ETHBaseStrategy {\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    address internal constant CURVE_POOL_ADDRESS = 0xDC24316b9AE028F1497c275EB9192a3Ea0f67022;\\r\\n    address public constant DEBT_W_ETH = 0xF63B34710400CAd3e044cFfDcAb00a0f32E33eCf;\\r\\n    address public constant W_ETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n    address public constant ST_ETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\r\\n    address public constant A_ST_ETH = 0x1982b2F5814301d4e9a8b0201555376e62F82428;\\r\\n    address public constant A_WETH = 0x030bA81f1c18d280636F32af80b9AAd02Cf0854e;\\r\\n    uint256 public constant RESERVE_ID_OF_ST_ETH = 31;\\r\\n    uint256 public constant BPS = 10000;\\r\\n    /**\\r\\n     * @dev Aave Lending Pool Provider\\r\\n     */\\r\\n    ILendingPoolAddressesProvider internal constant aaveProvider =\\r\\n        ILendingPoolAddressesProvider(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\\r\\n    ICurveLiquidityFarmingPool private curvePool;\\r\\n    uint256 public borrowFactor;\\r\\n    uint256 public borrowFactorMax;\\r\\n    uint256 public borrowFactorMin;\\r\\n    uint256 public borrowCount;\\r\\n\\r\\n    /// Events\\r\\n\\r\\n    /// @param _borrowFactor The new borrow factor\\r\\n    event UpdateBorrowFactor(uint256 _borrowFactor);\\r\\n    /// @param _borrowFactorMax The new max borrow factor\\r\\n    event UpdateBorrowFactorMax(uint256 _borrowFactorMax);\\r\\n    /// @param _borrowFactorMin The new min borrow factor\\r\\n    event UpdateBorrowFactorMin(uint256 _borrowFactorMin);\\r\\n    /// @param _borrowCount The new count Of borrow\\r\\n    event UpdateBorrowCount(uint256 _borrowCount);\\r\\n    /// @param _remainingAmount The amount of aToken will still be used as collateral to borrow eth\\r\\n    /// @param _overflowAmount The amount of debt token that exceeds the maximum allowable loan\\r\\n    event Rebalance(uint256 _remainingAmount, uint256 _overflowAmount);\\r\\n\\r\\n    function initialize(address _vault, string memory _name) external initializer {\\r\\n        address[] memory _wants = new address[](1);\\r\\n        //weth\\r\\n        _wants[0] = NativeToken.NATIVE_TOKEN;\\r\\n        borrowFactor = 6700;\\r\\n        borrowFactorMin = 6500;\\r\\n        borrowFactorMax = 6900;\\r\\n        borrowCount = 3;\\r\\n\\r\\n        address _lendingPoolAddress = aaveProvider.getLendingPool();\\r\\n        IERC20Upgradeable(ST_ETH).safeApprove(_lendingPoolAddress, type(uint256).max);\\r\\n        IERC20Upgradeable(W_ETH).safeApprove(_lendingPoolAddress, type(uint256).max);\\r\\n        IERC20Upgradeable(ST_ETH).safeApprove(CURVE_POOL_ADDRESS, type(uint256).max);\\r\\n\\r\\n        super._initialize(_vault, uint16(ProtocolEnum.Aave), _name, _wants);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets `_borrowFactor` to `borrowFactor`\\r\\n    /// @param _borrowFactor The new value of `borrowFactor`\\r\\n    /// Requirements: only vault manager can call\\r\\n    function setBorrowFactor(uint256 _borrowFactor) external isVaultManager {\\r\\n        require(\\r\\n            _borrowFactor < BPS &&\\r\\n                _borrowFactor >= borrowFactorMin &&\\r\\n                _borrowFactor <= borrowFactorMax,\\r\\n            \\\"setting output the range\\\"\\r\\n        );\\r\\n        borrowFactor = _borrowFactor;\\r\\n\\r\\n        emit UpdateBorrowFactor(_borrowFactor);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets `_borrowFactorMax` to `borrowFactorMax`\\r\\n    /// @param _borrowFactorMax The new value of `borrowFactorMax`\\r\\n    /// Requirements: only vault manager can call\\r\\n    function setBorrowFactorMax(uint256 _borrowFactorMax) external isVaultManager {\\r\\n        require(\\r\\n            _borrowFactorMax < BPS && _borrowFactorMax > borrowFactor,\\r\\n            \\\"setting output the range\\\"\\r\\n        );\\r\\n        borrowFactorMax = _borrowFactorMax;\\r\\n\\r\\n        emit UpdateBorrowFactorMax(_borrowFactorMax);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets `_borrowFactorMin` to `borrowFactorMin`\\r\\n    /// @param _borrowFactorMin The new value of `borrowFactorMin`\\r\\n    /// Requirements: only vault manager can call\\r\\n    function setBorrowFactorMin(uint256 _borrowFactorMin) external isVaultManager {\\r\\n        require(\\r\\n            _borrowFactorMin < BPS && _borrowFactorMin < borrowFactor,\\r\\n            \\\"setting output the range\\\"\\r\\n        );\\r\\n        borrowFactorMin = _borrowFactorMin;\\r\\n\\r\\n        emit UpdateBorrowFactorMin(_borrowFactorMin);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets `_borrowCount` to `borrowCount`\\r\\n    /// @param _borrowCount The new value of `borrowCount`\\r\\n    /// Requirements: only vault manager can call\\r\\n    function setBorrowCount(uint256 _borrowCount) external isVaultManager {\\r\\n        require(_borrowCount <= 10, \\\"setting output the range\\\");\\r\\n        borrowCount = _borrowCount;\\r\\n\\r\\n        emit UpdateBorrowCount(_borrowCount);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ETHBaseStrategy\\r\\n    function getVersion() external pure virtual override returns (string memory) {\\r\\n        return \\\"1.0.0\\\";\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ETHBaseStrategy\\r\\n    function getWantsInfo()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address[] memory _assets, uint256[] memory _ratios)\\r\\n    {\\r\\n        _assets = wants;\\r\\n        _ratios = new uint256[](1);\\r\\n        _ratios[0] = 1e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ETHBaseStrategy\\r\\n    function getOutputsInfo()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (OutputInfo[] memory _outputsInfo)\\r\\n    {\\r\\n        _outputsInfo = new OutputInfo[](1);\\r\\n        OutputInfo memory _info = _outputsInfo[0];\\r\\n        _info.outputCode = 0;\\r\\n        _info.outputTokens = wants;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ETHBaseStrategy\\r\\n    function getPositionDetail()\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (\\r\\n            address[] memory _tokens,\\r\\n            uint256[] memory _amounts,\\r\\n            bool _isETH,\\r\\n            uint256 _ethValue\\r\\n        )\\r\\n    {\\r\\n        _tokens = wants;\\r\\n        _amounts = new uint256[](1);\\r\\n\\r\\n        uint256 _wethDebtAmount = balanceOfToken(DEBT_W_ETH);\\r\\n        uint256 _wethAmount = balanceOfToken(W_ETH) + balanceOfToken(NativeToken.NATIVE_TOKEN);\\r\\n        uint256 _stEthAmount = balanceOfToken(A_ST_ETH) + balanceOfToken(ST_ETH);\\r\\n\\r\\n        _isETH = true;\\r\\n        _ethValue = queryTokenValueInETH(ST_ETH, _stEthAmount) + _wethAmount - _wethDebtAmount;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ETHBaseStrategy\\r\\n    function get3rdPoolAssets() external view override returns (uint256) {\\r\\n        return queryTokenValueInETH(ST_ETH, IERC20Upgradeable(ST_ETH).totalSupply());\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ETHBaseStrategy\\r\\n    function depositTo3rdPool(address[] memory _assets, uint256[] memory _amounts)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        uint256 _amount = _amounts[0];\\r\\n        ICurveLiquidityFarmingPool(CURVE_POOL_ADDRESS).exchange{value: _amount}(0, 1, _amount, 0);\\r\\n        uint256 _receivedStETHAmount = balanceOfToken(ST_ETH);\\r\\n        if (_receivedStETHAmount > 0) {\\r\\n            uint256 _astETHAmount;\\r\\n            uint256 _stETHPrice;\\r\\n            address _lendingPoolAddress = aaveProvider.getLendingPool();\\r\\n            {\\r\\n                ILendingPool _aaveLendingPool = ILendingPool(_lendingPoolAddress);\\r\\n                IPriceOracleGetter _aaveOracle = IPriceOracleGetter(aaveProvider.getPriceOracle());\\r\\n                _stETHPrice = _aaveOracle.getAssetPrice(ST_ETH);\\r\\n\\r\\n                uint256 _beforeBalanceOfAStETH = balanceOfToken(A_ST_ETH);\\r\\n                _aaveLendingPool.deposit(ST_ETH, _receivedStETHAmount, address(this), 0);\\r\\n\\r\\n                {\\r\\n                    uint256 _userConfigurationData = ILendingPool(_lendingPoolAddress)\\r\\n                        .getUserConfiguration(address(this))\\r\\n                        .data;\\r\\n                    if (\\r\\n                        !UserConfiguration.isUsingAsCollateral(\\r\\n                            _userConfigurationData,\\r\\n                            RESERVE_ID_OF_ST_ETH\\r\\n                        )\\r\\n                    ) {\\r\\n                        ILendingPool(_lendingPoolAddress).setUserUseReserveAsCollateral(\\r\\n                            ST_ETH,\\r\\n                            true\\r\\n                        );\\r\\n                    }\\r\\n                }\\r\\n                _astETHAmount = balanceOfToken(A_ST_ETH) - _beforeBalanceOfAStETH;\\r\\n            }\\r\\n\\r\\n            uint256 _borrowCount = borrowCount;\\r\\n            uint256 _borrowFactor = borrowFactor;\\r\\n            for (uint256 i = 0; i < _borrowCount; i++) {\\r\\n                if (_astETHAmount > 10) {\\r\\n                    uint256 _increaseAstEthAmount = _borrowEthAndDepositStEth(\\r\\n                        _astETHAmount,\\r\\n                        _borrowFactor,\\r\\n                        _stETHPrice,\\r\\n                        _lendingPoolAddress\\r\\n                    );\\r\\n                    _astETHAmount = _increaseAstEthAmount;\\r\\n                } else {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ETHBaseStrategy\\r\\n    function withdrawFrom3rdPool(\\r\\n        uint256 _withdrawShares,\\r\\n        uint256 _totalShares,\\r\\n        uint256 _outputCode\\r\\n    ) internal override {\\r\\n        IPriceOracleGetter _aaveOracle = IPriceOracleGetter(aaveProvider.getPriceOracle());\\r\\n        uint256 _stETHPrice = _aaveOracle.getAssetPrice(ST_ETH);\\r\\n        uint256 _astETHAmount = (balanceOfToken(A_ST_ETH) * _withdrawShares) / _totalShares;\\r\\n        uint256 _wethDebtAmount = (balanceOfToken(DEBT_W_ETH) * _withdrawShares) / _totalShares;\\r\\n        _repay(_astETHAmount, _wethDebtAmount, _stETHPrice);\\r\\n        uint256 _wethAmount = balanceOfToken(W_ETH);\\r\\n        if (_wethAmount > 0) {\\r\\n            IWeth(W_ETH).withdraw(_wethAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the info of borrow.\\r\\n    /// @return _remainingAmount The amount of aToken will still be used as collateral to borrow eth\\r\\n    /// @return _overflowAmount The amount of aToken that exceeds the maximum allowable loan\\r\\n    function borrowInfo() public view returns (uint256 _remainingAmount, uint256 _overflowAmount) {\\r\\n        IPriceOracleGetter _aaveOracle = IPriceOracleGetter(aaveProvider.getPriceOracle());\\r\\n        uint256 _stETHPrice = _aaveOracle.getAssetPrice(ST_ETH);\\r\\n        (_remainingAmount, _overflowAmount) = _borrowInfo(_stETHPrice);\\r\\n    }\\r\\n\\r\\n    /// @notice Rebalance the collateral of this strategy\\r\\n    /// Requirements: only keeper can call\\r\\n    function rebalance() external isKeeper {\\r\\n        address _lendingPoolAddress = aaveProvider.getLendingPool();\\r\\n        IPriceOracleGetter _aaveOracle = IPriceOracleGetter(aaveProvider.getPriceOracle());\\r\\n        uint256 _stETHPrice = _aaveOracle.getAssetPrice(ST_ETH);\\r\\n        (uint256 _remainingAmount, uint256 _overflowAmount) = _borrowInfo(_stETHPrice);\\r\\n        if (_remainingAmount > 10) {\\r\\n            uint256 _borrowCount = borrowCount;\\r\\n            uint256 _borrowFactor = borrowFactor;\\r\\n            uint256 _increaseAstEthAmount = _remainingAmount;\\r\\n            for (uint256 i = 0; i < _borrowCount; i++) {\\r\\n                if (_increaseAstEthAmount > 10) {\\r\\n                    _increaseAstEthAmount = _borrowEthAndDepositStEth(\\r\\n                        _increaseAstEthAmount,\\r\\n                        _borrowFactor,\\r\\n                        _stETHPrice,\\r\\n                        _lendingPoolAddress\\r\\n                    );\\r\\n                } else {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        } else if (_overflowAmount > 0) {\\r\\n            uint256 _astETHAmount = _overflowAmount;\\r\\n            uint256 _wethDebtAmount = _overflowAmount * 3;\\r\\n            _repay(_astETHAmount, _wethDebtAmount, _stETHPrice);\\r\\n        }\\r\\n        if (_remainingAmount + _overflowAmount > 0) {\\r\\n            emit Rebalance(_remainingAmount, _overflowAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the info of borrow.\\r\\n    /// @param _stETHPrice the price of stETH in ETH\\r\\n    /// @return _remainingAmount The amount of aToken will still be used as collateral to borrow eth\\r\\n    /// @return _overflowAmount The amount of debt token that exceeds the maximum allowable loan\\r\\n    function _borrowInfo(uint256 _stETHPrice)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256 _remainingAmount, uint256 _overflowAmount)\\r\\n    {\\r\\n        uint256 _stETHPriceCopy = _stETHPrice;\\r\\n        uint256 _borrowFactor = borrowFactor;\\r\\n        uint256 _borrowFactorMax = borrowFactorMax;\\r\\n        uint256 _borrowFactorMin = borrowFactorMin;\\r\\n        uint256 _leverage = BPS;\\r\\n        uint256 _leverageMax = BPS;\\r\\n        uint256 _leverageMin = BPS;\\r\\n        {\\r\\n            uint256 _currentBorrowFactor = BPS;\\r\\n            uint256 _currentBorrowFactorMax = BPS;\\r\\n            uint256 _currentBorrowFactorMin = BPS;\\r\\n            uint256 _borrowCount = borrowCount;\\r\\n            for (uint256 i = 0; i < _borrowCount; i++) {\\r\\n                _currentBorrowFactor = (_currentBorrowFactor * _borrowFactor) / BPS;\\r\\n                _leverage = _leverage + _currentBorrowFactor;\\r\\n                _currentBorrowFactorMax = (_currentBorrowFactorMax * _borrowFactorMax) / BPS;\\r\\n                _leverageMax = _leverageMax + _currentBorrowFactorMax;\\r\\n                _currentBorrowFactorMin = (_currentBorrowFactorMin * _borrowFactorMin) / BPS;\\r\\n                _leverageMin = _leverageMin + _currentBorrowFactorMin;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 _wethDebtAmount = balanceOfToken(DEBT_W_ETH);\\r\\n        uint256 _needATokenAmount;\\r\\n        uint256 _needATokenAmountMin;\\r\\n        uint256 _needATokenAmountMax;\\r\\n        {\\r\\n            uint256 _wethDebtAmountInAToken = (_wethDebtAmount * 1e18) / _stETHPriceCopy;\\r\\n            _needATokenAmount = (_wethDebtAmountInAToken * _leverage) / (_leverage - BPS);\\r\\n            _needATokenAmountMin = (_wethDebtAmountInAToken * _leverageMax) / (_leverageMax - BPS);\\r\\n            _needATokenAmountMax = (_wethDebtAmountInAToken * _leverageMin) / (_leverageMin - BPS);\\r\\n        }\\r\\n        {\\r\\n            uint256 _astETHAmount = balanceOfToken(A_ST_ETH);\\r\\n            if (_needATokenAmountMin > _astETHAmount) {\\r\\n                _overflowAmount =\\r\\n                    (_leverage *\\r\\n                        _wethDebtAmount *\\r\\n                        1e18 -\\r\\n                        _astETHAmount *\\r\\n                        (_leverage - BPS) *\\r\\n                        _stETHPriceCopy) /\\r\\n                    (_leverage *\\r\\n                        ICurveLiquidityFarmingPool(CURVE_POOL_ADDRESS).get_dy(1, 0, 1e18) -\\r\\n                        (_leverage - BPS) *\\r\\n                        _stETHPriceCopy);\\r\\n            } else if (_needATokenAmountMax < _astETHAmount) {\\r\\n                _remainingAmount = _astETHAmount - _needATokenAmount;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice redeem aToken ,then exchange to debt Token ,and finally repay the debt\\r\\n    /// @param _astETHAmount The amount of aToken that will still be to redeem\\r\\n    /// @param _stETHPrice the price of stETH in ETH\\r\\n    /// @param _lendingPoolAddress The address of lendingPool\\r\\n    /// @return _increaseAstEthAmount The amount of increase aToken\\r\\n    function _borrowEthAndDepositStEth(\\r\\n        uint256 _astETHAmount,\\r\\n        uint256 _borrowFactor,\\r\\n        uint256 _stETHPrice,\\r\\n        address _lendingPoolAddress\\r\\n    ) private returns (uint256 _increaseAstEthAmount) {\\r\\n        ILendingPool _aaveLendingPool = ILendingPool(_lendingPoolAddress);\\r\\n        uint256 _astETHValueInEth = (_astETHAmount * _stETHPrice) / 1e18;\\r\\n        uint256 _borrowAmount = (_astETHValueInEth * _borrowFactor) / BPS;\\r\\n        {\\r\\n            (, , uint256 _availableBorrowsETH, , , ) = _aaveLendingPool\\r\\n                .getUserAccountData(address(this));\\r\\n            if (_borrowAmount > _availableBorrowsETH) {\\r\\n                _borrowAmount = _availableBorrowsETH;\\r\\n            }\\r\\n        }\\r\\n        if (_borrowAmount > 0) {\\r\\n            _aaveLendingPool.borrow(\\r\\n                W_ETH,\\r\\n                _borrowAmount,\\r\\n                uint256(DataTypes.InterestRateMode.VARIABLE),\\r\\n                0,\\r\\n                address(this)\\r\\n            );\\r\\n            IWeth(W_ETH).withdraw(balanceOfToken(W_ETH));\\r\\n            uint256 _ethAmount = address(this).balance;\\r\\n            ICurveLiquidityFarmingPool(CURVE_POOL_ADDRESS).exchange{value: _ethAmount}(\\r\\n                0,\\r\\n                1,\\r\\n                _ethAmount,\\r\\n                0\\r\\n            );\\r\\n            uint256 _receivedStETHAmount = balanceOfToken(ST_ETH);\\r\\n\\r\\n            uint256 _beforeBalanceOfAStETH = balanceOfToken(A_ST_ETH);\\r\\n            _aaveLendingPool.deposit(ST_ETH, _receivedStETHAmount, address(this), 0);\\r\\n            _increaseAstEthAmount = balanceOfToken(A_ST_ETH) - _beforeBalanceOfAStETH;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice redeem aToken ,then exchange to debt Token ,and finally repay the debt\\r\\n    /// @param _astETHAmount The amount of aToken that will still be to redeem\\r\\n    /// @param _wethDebtAmount The amount of debt token that will still be to repay\\r\\n    /// @param _stETHPrice the price of stETH in ETH\\r\\n    function _repay(\\r\\n        uint256 _astETHAmount,\\r\\n        uint256 _wethDebtAmount,\\r\\n        uint256 _stETHPrice\\r\\n    ) private {\\r\\n        ICurveLiquidityFarmingPool _curvePool = ICurveLiquidityFarmingPool(CURVE_POOL_ADDRESS);\\r\\n        ILendingPool _aaveLendingPool = ILendingPool(aaveProvider.getLendingPool());\\r\\n        uint256 _repayCount = borrowCount * 2;\\r\\n\\r\\n        for (uint256 i = 0; i < _repayCount; i++) {\\r\\n            uint256 _allowWithdrawAmount = 0;\\r\\n            {\\r\\n                if (_astETHAmount > 1) {\\r\\n                    (\\r\\n                        uint256 _totalCollateralETH,\\r\\n                        uint256 _totalDebtETH,\\r\\n                        ,\\r\\n                        uint256 _currentLiquidationThreshold,\\r\\n                        ,\\r\\n\\r\\n                    ) = _aaveLendingPool.getUserAccountData(address(this));\\r\\n\\r\\n                    if (_currentLiquidationThreshold > 0) {\\r\\n                        uint256 _needCollateralETH = (_totalDebtETH * BPS) /\\r\\n                            _currentLiquidationThreshold +\\r\\n                            1;\\r\\n\\r\\n                        if (_totalCollateralETH > _needCollateralETH) {\\r\\n                            _allowWithdrawAmount =\\r\\n                                ((_totalCollateralETH - _needCollateralETH) * 1e18) /\\r\\n                                _stETHPrice;\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            if (_allowWithdrawAmount > 1 && _astETHAmount > 1) {\\r\\n                uint256 _setupWithdraw = _allowWithdrawAmount;\\r\\n                if (_setupWithdraw > _astETHAmount) {\\r\\n                    _setupWithdraw = _astETHAmount;\\r\\n                }\\r\\n                if (_astETHAmount - _setupWithdraw < 1e10) {\\r\\n                    uint256 _userBalance = balanceOfToken(A_ST_ETH);\\r\\n                    if (_setupWithdraw > _userBalance) {\\r\\n                        _setupWithdraw = _userBalance;\\r\\n                    }\\r\\n                }\\r\\n                _astETHAmount = _astETHAmount - _setupWithdraw;\\r\\n                if (_setupWithdraw > 1) {\\r\\n                    _aaveLendingPool.withdraw(ST_ETH, _setupWithdraw, address(this));\\r\\n                    uint256 _receivedStETHAmount = balanceOfToken(ST_ETH);\\r\\n                    _curvePool.exchange(1, 0, _receivedStETHAmount, 0);\\r\\n                    if (_wethDebtAmount > 0) {\\r\\n                        uint256 _setupRepay = _wethDebtAmount;\\r\\n                        {\\r\\n                            uint256 _ethAmount = balanceOfToken(NativeToken.NATIVE_TOKEN);\\r\\n                            if (_ethAmount < _setupRepay) {\\r\\n                                _setupRepay = _ethAmount;\\r\\n                            }\\r\\n                        }\\r\\n                        if (_setupRepay > 0) {\\r\\n                            IWeth(W_ETH).deposit{value: _setupRepay}();\\r\\n                            _aaveLendingPool.repay(\\r\\n                                W_ETH,\\r\\n                                _setupRepay,\\r\\n                                uint256(DataTypes.InterestRateMode.VARIABLE),\\r\\n                                address(this)\\r\\n                            );\\r\\n                            _wethDebtAmount = _wethDebtAmount - _setupRepay;\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            } else {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/eth/enums/ProtocolEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0 <0.9.0;\\r\\n\\r\\nenum ProtocolEnum {\\r\\n    Balancer,\\r\\n    UniswapV2,\\r\\n    Convex,\\r\\n    Aura,\\r\\n    UniswapV3,\\r\\n    StakeWise,\\r\\n    YearnV2,\\r\\n    Aave\\r\\n}\\r\\n\",\"versionPragma\":\">=0.6.0 <0.9.0\"},\"contracts/eth/oracle/IPriceOracleConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title IPriceOracleConsumer interface\\r\\ninterface IPriceOracleConsumer {\\r\\n\\r\\n    /// @return The number of decimals for getting user representation of a token amount.\\r\\n    function decimals() external view returns(uint8);\\r\\n\\r\\n    /// @return The price of 'stEth' token in ETH\\r\\n    function stEthPriceInEth() external view returns(uint);\\r\\n\\r\\n    /// @return The price of 'wstEth' token in ETH\\r\\n    function wstEthPriceInEth() external view returns(uint);\\r\\n\\r\\n    /// @return The price of 'rEth' token in ETH\\r\\n    function rEthPriceInEth() external view returns(uint);\\r\\n\\r\\n    /// @return The price of 'wEth' token in ETH\\r\\n    function wEthPriceInEth() external view returns(uint);\\r\\n\\r\\n    /// @return The price of 'sEth' token in ETH\\r\\n    function sEthPriceInEth() external view returns(uint);\\r\\n\\r\\n    /// @return The price of 'sEth2' token in ETH\\r\\n    function sEth2PriceInEth() external view returns(uint);\\r\\n\\r\\n    /// @return The price of 'rEth2' token in ETH\\r\\n    function rEth2PriceInEth() external view returns (uint);\\r\\n\\r\\n    /// @return The price of 'ETH' token in USD\\r\\n    function ethPriceInUsd() external view returns(uint);\\r\\n\\r\\n    /// @return The price of 'stEth' token in USD\\r\\n    function stEthPriceInUsd() external view returns(uint);\\r\\n\\r\\n    /// @return The price of 'wstEth' token in USD\\r\\n    function wstEthPriceInUsd() external view returns(uint);\\r\\n\\r\\n    /// @return The price of '' token in USD\\r\\n    function rEthPriceInUsd() external view returns(uint);\\r\\n\\r\\n    /// @return The price of 'rEth' token in USD\\r\\n    function wEthPriceInUsd() external view returns(uint);\\r\\n\\r\\n    /// @return The price of 'sEth2' token in USD\\r\\n    function sEth2PriceInUsd() external view returns(uint);\\r\\n\\r\\n    /// @return The price of 'rEth2' token in USD\\r\\n    function rEth2PriceInUsd() external view returns (uint);\\r\\n\\r\\n    /// @return The price of '_asset' token in ETH\\r\\n    function priceInEth(address _asset) external view returns(uint);\\r\\n\\r\\n    /// @return The price of '_asset' token in USD\\r\\n    function priceInUSD(address _asset) external view returns(uint);\\r\\n\\r\\n    /// @return The value of '_asset' with `_amount` in ETH\\r\\n    function valueInEth(address _asset,uint _amount) external view returns(uint);\\r\\n\\r\\n    /// @return The value of '_asset' with `_amount` in USD\\r\\n    function valueInUsd(address _asset,uint _amount) external view returns(uint);\\r\\n\\r\\n    /// @return The value of '_fromToken' with `_amount` in unit of the `_toToken`\\r\\n    function valueInTargetToken(address _fromToken, uint256 _amount, address _toToken) external view returns(uint256);\\r\\n\\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.0\"},\"boc-contract-core/contracts/exchanges/IExchangeAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.6.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IExchangeAdapter {\\n    /**\\n     * @param amount The amount to swap\\n     * @param srcToken The token swap from\\n     * @param dstToken The token swap to\\n     * @param receiver The user to receive `dstToken`\\n     */\\n    struct SwapDescription {\\n        uint256 amount;\\n        address srcToken;\\n        address dstToken;\\n        address receiver;\\n    }\\n\\n    /// @notice The identifier of this exchange adapter\\n    function identifier() external pure returns (string memory _identifier);\\n\\n    /**\\n     * @notice Swap with `_sd` data by using `_method` and `_data` on `_platform`.\\n     * @param _method The method of the exchange platform\\n     * @param _encodedCallArgs The encoded parameters to call\\n     * @param _sd The description info of this swap\\n     * @return The expected amountIn to swap\\n     */\\n    function swap(\\n        uint8 _method,\\n        bytes calldata _encodedCallArgs,\\n        SwapDescription calldata _sd\\n    ) external payable returns (uint256);\\n}\\n\",\"versionPragma\":\">=0.6.0 <0.9.0\"},\"boc-contract-core/contracts/exchanges/IExchangeAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IExchangeAdapter.sol\\\";\\n\\ninterface IExchangeAggregator {\\n    /**\\n     * @param platform Called exchange platforms\\n     * @param method The method of the exchange platform\\n     * @param encodeExchangeArgs The encoded parameters to call\\n     * @param slippage The slippage when exchange\\n     * @param oracleAdditionalSlippage The additional slippage for oracle estimated\\n     */\\n    struct ExchangeParam {\\n        address platform;\\n        uint8 method;\\n        bytes encodeExchangeArgs;\\n        uint256 slippage;\\n        uint256 oracleAdditionalSlippage;\\n    }\\n\\n    /**\\n     * @param platform Called exchange platforms\\n     * @param method The method of the exchange platform\\n     * @param data The encoded parameters to call\\n     * @param swapDescription swap info\\n     */\\n    struct SwapParam {\\n        address platform;\\n        uint8 method;\\n        bytes data;\\n        IExchangeAdapter.SwapDescription swapDescription;\\n    }\\n\\n    /**\\n     * @param srcToken The token swap from\\n     * @param dstToken The token swap to\\n     * @param amount The amount to swap\\n     * @param exchangeParam The struct of ExchangeParam\\n     */\\n    struct ExchangeToken {\\n        address fromToken;\\n        address toToken;\\n        uint256 fromAmount;\\n        ExchangeParam exchangeParam;\\n    }\\n\\n    event ExchangeAdapterAdded(address[] _exchangeAdapters);\\n\\n    event ExchangeAdapterRemoved(address[] _exchangeAdapters);\\n\\n    event Swap(\\n        address _platform,\\n        uint256 _amount,\\n        address _srcToken,\\n        address _dstToken,\\n        uint256 _exchangeAmount,\\n        address indexed _receiver,\\n        address _sender\\n    );\\n\\n    function swap(\\n        address _platform,\\n        uint8 _method,\\n        bytes calldata _data,\\n        IExchangeAdapter.SwapDescription calldata _sd\\n    ) external payable returns (uint256);\\n\\n    function batchSwap(SwapParam[] calldata _swapParams) external payable returns (uint256[] memory);\\n\\n    function getExchangeAdapters()\\n        external\\n        view\\n        returns (address[] memory _exchangeAdapters, string[] memory _identifiers);\\n\\n    function addExchangeAdapters(address[] calldata _exchangeAdapters) external;\\n\\n    function removeExchangeAdapters(address[] calldata _exchangeAdapters) external;\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/eth/vault/IETHVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"boc-contract-core/contracts/exchanges/IExchangeAggregator.sol\\\";\\r\\n\\r\\n/// @title IETHVault interface\\r\\ninterface IETHVault {\\r\\n    /// @param lastReport The last report timestamp\\r\\n    /// @param totalDebt The total asset of this strategy\\r\\n    /// @param profitLimitRatio The limited ratio of profit\\r\\n    /// @param lossLimitRatio The limited ratio for loss\\r\\n    /// @param enforceChangeLimit The switch of enforce change Limit\\r\\n    struct StrategyParams {\\r\\n        uint256 lastReport;\\r\\n        uint256 totalDebt;\\r\\n        uint256 profitLimitRatio;\\r\\n        uint256 lossLimitRatio;\\r\\n        bool enforceChangeLimit;\\r\\n    }\\r\\n\\r\\n    /// @param strategy The new strategy to add\\r\\n    /// @param profitLimitRatio The limited ratio of profit\\r\\n    /// @param lossLimitRatio The limited ratio for loss\\r\\n    struct StrategyAdd {\\r\\n        address strategy;\\r\\n        uint256 profitLimitRatio;\\r\\n        uint256 lossLimitRatio;\\r\\n    }\\r\\n\\r\\n    /// @param _asset The new asset to add\\r\\n    event AddAsset(address _asset);\\r\\n\\r\\n    /// @param _asset The new asset to remove\\r\\n    event RemoveAsset(address _asset);\\r\\n\\r\\n    /// @param _strategies The new strategy list to add\\r\\n    event AddStrategies(address[] _strategies);\\r\\n\\r\\n    /// @param _strategies The multi strategies to remove\\r\\n    event RemoveStrategies(address[] _strategies);\\r\\n\\r\\n    /// @param _strategy One strategy to remove\\r\\n    event RemoveStrategyByForce(address _strategy);\\r\\n\\r\\n    /// @param _account The minter\\r\\n    /// @param _assets The address list of the assets depositing\\r\\n    /// @param _amounts The amount of the asset depositing\\r\\n    /// @param _mintAmount The amount of the asset minting\\r\\n    event Mint(address _account, address[] _assets, uint256[] _amounts, uint256 _mintAmount);\\r\\n\\r\\n    /// @param _account The owner of token burning\\r\\n    /// @param _amounts The amount of the ETHi token burning\\r\\n    /// @param _actualAmount The received amount actually\\r\\n    /// @param _shareAmount The amount of the shares burning\\r\\n    /// @param _assets The address list of assets to receive\\r\\n    /// @param _amounts The amount list of assets to receive\\r\\n    event Burn(\\r\\n        address _account,\\r\\n        uint256 _amount,\\r\\n        uint256 _actualAmount,\\r\\n        uint256 _shareAmount,\\r\\n        address[] _assets,\\r\\n        uint256[] _amounts\\r\\n    );\\r\\n\\r\\n    /// @param  _platform The platform used for the exchange\\r\\n    /// @param _srcAsset The address of asset exchange from \\r\\n    /// @param _srcAmount The amount of asset exchange from \\r\\n    /// @param _distAsset The address of asset exchange to \\r\\n    /// @param _distAmount The amount of asset exchange to \\r\\n    event Exchange(\\r\\n        address _platform,\\r\\n        address _srcAsset,\\r\\n        uint256 _srcAmount,\\r\\n        address _distAsset,\\r\\n        uint256 _distAmount\\r\\n    );\\r\\n\\r\\n    /// @param _strategy The specified strategy to redeem\\r\\n    /// @param _debtChangeAmount The amount to redeem in ETH\\r\\n    /// @param _assets The address list of asset redeeming \\r\\n    /// @param _amounts The amount list of asset redeeming \\r\\n    event Redeem(\\r\\n        address _strategy,\\r\\n        uint256 _debtChangeAmount,\\r\\n        address[] _assets,\\r\\n        uint256[] _amounts\\r\\n    );\\r\\n\\r\\n    /// @param _strategy The specified strategy to lend\\r\\n    /// @param _wants The address list of token wanted\\r\\n    /// @param _amounts The amount list of token wanted\\r\\n    /// @param _lendValue The value to lend in USD \\r\\n    event LendToStrategy(\\r\\n        address indexed _strategy,\\r\\n        address[] _wants,\\r\\n        uint256[] _amounts,\\r\\n        uint256 _lendValue\\r\\n    );\\r\\n    /// @param _strategies The strategy list to remove\\r\\n    event RemoveStrategyFromQueue(address[] _strategies);\\r\\n\\r\\n    /// @param _shutdown The new boolean value of the emergency shutdown switch\\r\\n    event SetEmergencyShutdown(bool _shutdown);\\r\\n\\r\\n    event RebasePaused();\\r\\n    event RebaseUnpaused();\\r\\n\\r\\n    /// @param _threshold is the numerator and the denominator is 1e7. x/1e7\\r\\n    event RebaseThresholdUpdated(uint256 _threshold);\\r\\n\\r\\n    /// @param _basis the new value of `trusteeFeeBps`\\r\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\r\\n\\r\\n    /// @param _maxTimestampBetweenTwoReported the new value of `maxTimestampBetweenTwoReported`\\r\\n    event MaxTimestampBetweenTwoReportedChanged(uint256 _maxTimestampBetweenTwoReported);\\r\\n\\r\\n    /// @param _minCheckedStrategyTotalDebt the new value of `minCheckedStrategyTotalDebt`\\r\\n    event MinCheckedStrategyTotalDebtChanged(uint256 _minCheckedStrategyTotalDebt);\\r\\n\\r\\n    /// @param _minimumInvestmentAmount the new value of `minimumInvestmentAmount`\\r\\n    event MinimumInvestmentAmountChanged(uint256 _minimumInvestmentAmount);\\r\\n\\r\\n    /// @param _address the new treasury address\\r\\n    event TreasuryAddressChanged(address _address);\\r\\n\\r\\n    /// @param _address the new exchange manager address\\r\\n    event ExchangeManagerAddressChanged(address _address);\\r\\n\\r\\n    /// @param _adjustPositionPeriod the new boolean value of `adjustPositionPeriod`\\r\\n    event SetAdjustPositionPeriod(bool _adjustPositionPeriod);\\r\\n\\r\\n    /// @param _redeemFeeBps the new value of `_redeemFeeBps`\\r\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\r\\n\\r\\n    /// @param _queues the new queue to withdraw\\r\\n    event SetWithdrawalQueue(address[] _queues);\\r\\n\\r\\n    /// @param _totalShares The total shares when rebasing\\r\\n    /// @param _totalValue The total value when rebasing\\r\\n    /// @param _newUnderlyingUnitsPerShare The new value of `underlyingUnitsPerShare` when rebasing\\r\\n    event Rebase(uint256 _totalShares, uint256 _totalValue, uint256 _newUnderlyingUnitsPerShare);\\r\\n\\r\\n    /// @param _strategy The strategy for reporting\\r\\n    /// @param _gain The gain in USD units for this report\\r\\n    /// @param _loss The loss in USD units for this report\\r\\n    /// @param _lastStrategyTotalDebt The total debt of `_strategy` for last report\\r\\n    /// @param _nowStrategyTotalDebt The total debt of `_strategy` for this report\\r\\n    /// @param _rewardTokens The reward token list\\r\\n    /// @param _claimAmounts The amount list of `_rewardTokens`\\r\\n    /// @param _type The type of lend operations\\r\\n    event StrategyReported(\\r\\n        address indexed _strategy,\\r\\n        uint256 _gain,\\r\\n        uint256 _loss,\\r\\n        uint256 _lastStrategyTotalDebt,\\r\\n        uint256 _nowStrategyTotalDebt,\\r\\n        address[] _rewardTokens,\\r\\n        uint256[] _claimAmounts,\\r\\n        uint256 _type\\r\\n    );\\r\\n\\r\\n    /// @param _totalDebtOfBeforeAdjustPosition The total debt Of before adjust position\\r\\n    /// @param _trackedAssets The address list of assets tracked\\r\\n    /// @param _vaultCashDetatil The assets's balance list of vault\\r\\n    /// @param _vaultBufferCashDetail The amount list of assets transfer from vault buffer to vault \\r\\n    event StartAdjustPosition(\\r\\n        uint256 _totalDebtOfBeforeAdjustPosition,\\r\\n        address[] _trackedAssets,\\r\\n        uint256[] _vaultCashDetatil,\\r\\n        uint256[] _vaultBufferCashDetail\\r\\n    );\\r\\n\\r\\n    /// @param _transferValue The total value to transfer on this adjust position\\r\\n    /// @param _redeemValue The total value to redeem on this adjust position\\r\\n    /// @param _totalDebt The all strategy asset value\\r\\n    /// @param _totalValueOfAfterAdjustPosition The total asset value Of vault after adjust position \\r\\n    /// @param _totalValueOfBeforeAdjustPosition The total asset value Of vault before adjust position\\r\\n    event EndAdjustPosition(\\r\\n        uint256 _transferValue,\\r\\n        uint256 _redeemValue,\\r\\n        uint256 _totalDebt,\\r\\n        uint256 _totalValueOfAfterAdjustPosition,\\r\\n        uint256 _totalValueOfBeforeAdjustPosition\\r\\n    );\\r\\n\\r\\n    /// @param _pegTokenAmount The amount of the pegged token\\r\\n    /// @param _assets The address list of asset transfer from vault buffer to vault \\r\\n    /// @param _amounts The amount list of asset transfer from vault buffer to vault\\r\\n    event PegTokenSwapCash(uint256 _pegTokenAmount, address[] _assets, uint256[] _amounts);\\r\\n\\r\\n    /// @notice Return the version of vault\\r\\n    function getVersion() external pure returns (string memory);\\r\\n\\r\\n    /// @notice Return the supported assets to mint ETHi \\r\\n    function getSupportAssets() external view returns (address[] memory _assets);\\r\\n\\r\\n    /// @notice Check '_asset' is supported or not\\r\\n    function checkIsSupportAsset(address _asset) external view;\\r\\n\\r\\n    /// @notice Return the assets held by vault\\r\\n    function getTrackedAssets() external view returns (address[] memory _assets);\\r\\n\\r\\n    /// @notice Return the Vault holds asset value directly in ETH (1e18)\\r\\n    function valueOfTrackedTokens() external view returns (uint256 _totalValue);\\r\\n\\r\\n    /// @notice Return the asset value in ETH(1e18) held by vault and vault buffer\\r\\n    function valueOfTrackedTokensIncludeVaultBuffer() external view returns (uint256 _totalValue);\\r\\n\\r\\n    /// @notice Return the total asset value in ETH held by vault\\r\\n    function totalAssets() external view returns (uint256);\\r\\n\\r\\n    /// @notice Return the total asset in ETH held by vault and vault buffer \\r\\n    function totalAssetsIncludeVaultBuffer() external view returns (uint256);\\r\\n\\r\\n    /// @notice Return the total value(by chainlink price) in USD(1e18) held by vault\\r\\n    function totalValue() external view returns (uint256);\\r\\n\\r\\n    /// @notice Start adjust position\\r\\n    function startAdjustPosition() external;\\r\\n\\r\\n    /// @notice End adjust position\\r\\n    function endAdjustPosition() external;\\r\\n\\r\\n    /// @notice Return underlying token per share token\\r\\n    function underlyingUnitsPerShare() external view returns (uint256);\\r\\n\\r\\n    /// @notice Get pegToken price in ETH(1e18)\\r\\n    function getPegTokenPrice() external view returns (uint256);\\r\\n\\r\\n    /// @dev Calculate total value of all assets held in Vault.\\r\\n    /// @return _value Total value(by chainlink price) in USD (1e18)\\r\\n    function totalValueInVault() external view returns (uint256 _value);\\r\\n\\r\\n    /// @dev Calculate total value of all assets held in Strategies.\\r\\n    /// @return _value Total value(by chainlink price) in USD (1e18)\\r\\n    function totalValueInStrategies() external view returns (uint256 _value);\\r\\n\\r\\n    /// @notice Return all strategy addresses\\r\\n    function getStrategies() external view returns (address[] memory _strategies);\\r\\n\\r\\n    /// @notice Check '_strategy' is active or not\\r\\n    function checkActiveStrategy(address _strategy) external view;\\r\\n\\r\\n    /// @notice Estimate the amount of shares to mint\\r\\n    /// @param _amount Amount of the asset being deposited\\r\\n    /// @return _sharesAmount The amount of ETHi ticket\\r\\n    function estimateMint(address _asset, uint256 _amount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 _sharesAmount);\\r\\n\\r\\n    /// @notice Mints the ETHi ticket with ETH\\r\\n    /// @param _amount Amount of the asset being deposited\\r\\n    /// @param _minimumAmount The minimum return amount of the ETHi ticket\\r\\n    /// @return _sharesAmount The amount of ETHi ticket\\r\\n    function mint(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        uint256 _minimumAmount\\r\\n    ) external payable returns (uint256 _sharesAmount);\\r\\n\\r\\n    /// @notice burn ETHi, return xETH\\r\\n    /// @param _amount Amount of ETHi to burn\\r\\n    /// @param _minimumAmount Minimum stablecoin units to receive in return\\r\\n    /// @param _assets The address list of assets to receive\\r\\n    /// @param _amounts The amount list of assets to receive\\r\\n    function burn(uint256 _amount, uint256 _minimumAmount)\\r\\n        external\\r\\n        returns (address[] memory _assets, uint256[] memory _amounts);\\r\\n\\r\\n    /// @notice Change ETHi supply with Vault total assets.\\r\\n    function rebase() external;\\r\\n\\r\\n    /// @notice Allocate funds in Vault to strategies.\\r\\n    /// @param _strategy The specified strategy to lend\\r\\n    /// @param _exchangeTokens All exchange info\\r\\n    function lend(address _strategy, IExchangeAggregator.ExchangeToken[] calldata _exchangeTokens)\\r\\n        external;\\r\\n\\r\\n    /// @notice Withdraw the funds from specified strategy.\\r\\n    /// @param _strategy The specified strategy to redeem\\r\\n    /// @param _amount The amount to redeem in ETH \\r\\n    /// @param _outputCode The code of output \\r\\n    function redeem(\\r\\n        address _strategy,\\r\\n        uint256 _amount,\\r\\n        uint256 _outputCode\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Exchange from '_fromToken' to '_toToken'\\r\\n    /// @param _fromToken The token swap from\\r\\n    /// @param _toToken The token swap to\\r\\n    /// @param _amount The amount to swap\\r\\n    /// @param _exchangeParam The struct of ExchangeParam, see {ExchangeParam} struct\\r\\n    /// @return _exchangeAmount The real amount to exchange\\r\\n    /// Emits a {Exchange} event.\\r\\n    function exchange(\\r\\n        address _fromToken,\\r\\n        address _toToken,\\r\\n        uint256 _amount,\\r\\n        IExchangeAggregator.ExchangeParam memory _exchangeParam\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /// @dev Report the current asset of strategy caller\\r\\n    /// @param _rewardTokens The reward token list\\r\\n    /// @param _claimAmounts The claim amount list\\r\\n    /// Emits a {StrategyReported} event.\\r\\n    function report(address[] memory _rewardTokens, uint256[] memory _claimAmounts) external;\\r\\n\\r\\n    /// @notice Shutdown the vault when an emergency occurs, cannot mint/burn.\\r\\n    function setEmergencyShutdown(bool _active) external;\\r\\n\\r\\n    /// @notice Sets adjustPositionPeriod true when adjust position occurs, cannot remove add asset/strategy and cannot mint/burn.\\r\\n    function setAdjustPositionPeriod(bool _adjustPositionPeriod) external;\\r\\n\\r\\n    /// @dev Sets a minimum difference ratio automatically rebase.\\r\\n    /// @param _threshold _threshold is the numerator and the denominator is 1e7 (x/1e7).\\r\\n    function setRebaseThreshold(uint256 _threshold) external;\\r\\n\\r\\n    /// @dev Sets a fee in basis points to be charged for a redeem.\\r\\n    /// @param _redeemFeeBps Basis point fee to be charged\\r\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\r\\n\\r\\n    /// @dev Sets the treasuryAddress that can receive a portion of yield.\\r\\n    ///      Setting to the zero address disables this feature.\\r\\n    function setTreasuryAddress(address _address) external;\\r\\n\\r\\n    /// @dev Sets the exchangeManagerAddress that can receive a portion of yield.\\r\\n    function setExchangeManagerAddress(address _exchangeManagerAddress) external;\\r\\n\\r\\n    /// @dev Sets the TrusteeFeeBps to the percentage of yield that should be\\r\\n    ///      received in basis points.\\r\\n    function setTrusteeFeeBps(uint256 _basis) external;\\r\\n\\r\\n    /// @notice Sets '_queues' as advance withdrawal queue\\r\\n    function setWithdrawalQueue(address[] memory _queues) external;\\r\\n\\r\\n    /// @notice Sets '_enabled' to the 'enforceChangeLimit' field of '_strategy'\\r\\n    function setStrategyEnforceChangeLimit(address _strategy, bool _enabled) external;\\r\\n\\r\\n    /// @notice Sets '_lossRatioLimit' to the 'lossRatioLimit' field of '_strategy'\\r\\n    ///         Sets '_profitLimitRatio' to the 'profitLimitRatio' field of '_strategy'\\r\\n    function setStrategySetLimitRatio(\\r\\n        address _strategy,\\r\\n        uint256 _lossRatioLimit,\\r\\n        uint256 _profitLimitRatio\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Sets the deposit paused flag to true to prevent rebasing.\\r\\n    function pauseRebase() external;\\r\\n\\r\\n    /// @dev Sets the deposit paused flag to true to allow rebasing.\\r\\n    function unpauseRebase() external;\\r\\n\\r\\n    /// @notice Added support for specific asset.\\r\\n    function addAsset(address _asset) external;\\r\\n\\r\\n    /// @notice Remove support for specific asset.\\r\\n    function removeAsset(address _asset) external;\\r\\n\\r\\n    /// @notice Add strategy to strategy list\\r\\n    /// @dev The strategy added to the strategy list,\\r\\n    ///      Vault may invest funds into the strategy,\\r\\n    ///      and the strategy will invest the funds in the 3rd protocol\\r\\n    function addStrategy(StrategyAdd[] memory _strategyAdds) external;\\r\\n\\r\\n    /// @notice Remove multi strategies from strategy list\\r\\n    /// @dev The removed policy withdraws funds from the 3rd protocol and returns to the Vault\\r\\n    function removeStrategy(address[] memory _strategies) external;\\r\\n\\r\\n    /// @notice Forced to remove the '_strategy' \\r\\n    function forceRemoveStrategy(address _strategy) external;\\r\\n\\r\\n    /////////////////////////////////////////\\r\\n    //           WithdrawalQueue           //\\r\\n    /////////////////////////////////////////\\r\\n    \\r\\n    /// @notice Return the withdrawal queue\\r\\n    function getWithdrawalQueue() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Remove multi strategies from the withdrawal queue\\r\\n    /// @param _strategies multi strategies to remove\\r\\n    function removeStrategyFromQueue(address[] memory _strategies) external;\\r\\n\\r\\n    /// @notice Return the boolean value of `adjustPositionPeriod`\\r\\n    function adjustPositionPeriod() external view returns (bool);\\r\\n\\r\\n    /// @notice Return the status of emergency shutdown switch\\r\\n    function emergencyShutdown() external view returns (bool);\\r\\n\\r\\n    /// @notice Return the status of rebase paused switch\\r\\n    function rebasePaused() external view returns (bool);\\r\\n\\r\\n    /// @notice Return the rebaseThreshold value,\\r\\n    /// over this difference ratio automatically rebase.\\r\\n    /// rebaseThreshold is the numerator and the denominator is 1e7, \\r\\n    /// the real ratio is `rebaseThreshold`/1e7.\\r\\n    function rebaseThreshold() external view returns (uint256);\\r\\n\\r\\n    /// @notice Return the Amount of yield collected in basis points\\r\\n    function trusteeFeeBps() external view returns (uint256);\\r\\n\\r\\n    /// @notice Return the redemption fee in basis points\\r\\n    function redeemFeeBps() external view returns (uint256);\\r\\n\\r\\n    /// @notice Return the total asset of all strategy\\r\\n    function totalDebt() external view returns (uint256);\\r\\n\\r\\n    /// @notice Return the exchange manager address\\r\\n    function exchangeManager() external view returns (address);\\r\\n\\r\\n    /// @notice Return all info of '_strategy'\\r\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\r\\n\\r\\n    /// @notice Return withdraw strategy address list\\r\\n    function withdrawQueue() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Return the address of treasury\\r\\n    function treasury() external view returns (address);\\r\\n\\r\\n    /// @notice Return the address of price oracle\\r\\n    function priceProvider() external view returns (address);\\r\\n\\r\\n    /// @notice Return the address of access control proxy contract\\r\\n    function accessControlProxy() external view returns (address);\\r\\n\\r\\n    /// @notice Sets the minimum strategy total debt \\r\\n    ///     that will be checked for the strategy reporting\\r\\n    function setMinCheckedStrategyTotalDebt(uint256 _minCheckedStrategyTotalDebt) external;\\r\\n\\r\\n    /// @notice Return the minimum strategy total debt \\r\\n    ///     that will be checked for the strategy reporting\\r\\n    function minCheckedStrategyTotalDebt() external view returns (uint256);\\r\\n\\r\\n    /// @notice Sets the maximum timestamp between two reported\\r\\n    function setMaxTimestampBetweenTwoReported(uint256 _maxTimestampBetweenTwoReported) external;\\r\\n\\r\\n    /// @notice The maximum timestamp between two reported\\r\\n    function maxTimestampBetweenTwoReported() external view returns (uint256);\\r\\n\\r\\n    /// @notice Sets the minimum investment amount\\r\\n    function setMinimumInvestmentAmount(uint256 _minimumInvestmentAmount) external;\\r\\n\\r\\n    /// @notice Return the minimum investment amount\\r\\n    function minimumInvestmentAmount() external view returns (uint256);\\r\\n\\r\\n    /// @notice Sets the address of vault buffer contract\\r\\n    function setVaultBufferAddress(address _address) external;\\r\\n\\r\\n    /// @notice Return the address of vault buffer contract\\r\\n    function vaultBufferAddress() external view returns (address);\\r\\n\\r\\n    /// @notice Sets the address of PegToken contract\\r\\n    function setPegTokenAddress(address _address) external;\\r\\n\\r\\n    /// @notice Return the address of PegToken contract\\r\\n    function pegTokenAddress() external view returns (address);\\r\\n\\r\\n    /// @notice Sets the new implement contract address\\r\\n    function setAdminImpl(address _newImpl) external;\\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/eth/strategies/IETHStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../vault/IETHVault.sol\\\";\\r\\n\\r\\n/// @title IETHStrategy interface\\r\\ninterface IETHStrategy {\\r\\n\\r\\n    /// @param _assets The address list of tokens borrow\\r\\n    /// @param _amounts The amount list of tokens borrow\\r\\n    event Borrow(address[] _assets, uint256[] _amounts);\\r\\n\\r\\n    /// @param _withdrawShares The amount of shares to withdraw. Numerator\\r\\n    /// @param _totalShares The total amount of shares owned by the strategy. Denominator\\r\\n    /// @param _assets The address list of the assets repaying\\r\\n    /// @param _amounts The amount list of the assets repaying\\r\\n    event Repay(\\r\\n        uint256 _withdrawShares,\\r\\n        uint256 _totalShares,\\r\\n        address[] _assets,\\r\\n        uint256[] _amounts\\r\\n    );\\r\\n\\r\\n    /// @param _strategy The specified strategy emitted this event\\r\\n    /// @param _rewards The address list of reward tokens\\r\\n    /// @param _rewardAmounts The amount list of of reward tokens\\r\\n    /// @param _wants The address list of wantted tokens\\r\\n    /// @param _wantAmounts The amount list of wantted tokens\\r\\n    event SwapRewardsToWants(\\r\\n        address _strategy,\\r\\n        address[] _rewards,\\r\\n        uint256[] _rewardAmounts,\\r\\n        address[] _wants,\\r\\n        uint256[] _wantAmounts\\r\\n    );\\r\\n\\r\\n    /// @param _oldValue the old value of `isWantRatioIgnorable` flag\\r\\n    /// @param _newValue the new value of `isWantRatioIgnorable` flag\\r\\n    event SetIsWantRatioIgnorable(bool _oldValue, bool _newValue);\\r\\n\\r\\n    /// @notice Return the version of strategy\\r\\n    function getVersion() external pure returns (string memory);\\r\\n\\r\\n    /// @notice Return the name of strategy\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /// @notice Return the ID of protocol, it marks which third protocol does this strategy belong to\\r\\n    function protocol() external view returns (uint16);\\r\\n\\r\\n    /// @notice Return the vault address\\r\\n    function vault() external view returns (IETHVault);\\r\\n\\r\\n    /// @notice Return the underlying token list and ratio list needed by the strategy\\r\\n    /// @return _assets the address list of token to deposit\\r\\n    /// @return _ratios the ratios list of `_assets`. \\r\\n    ///     The ratio is the proportion of each asset to total assets\\r\\n    function getWantsInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _assets, uint256[] memory _ratios);\\r\\n\\r\\n    /// @notice Return the underlying token list needed by the strategy\\r\\n    function getWants() external view returns (address[] memory _wants);\\r\\n\\r\\n    /// @notice Returns the position details of the strategy.\\r\\n    /// @return _tokens The list of the position token\\r\\n    /// @return _amounts The list of the position amount\\r\\n    /// @return _isETH Whether to count in ETH\\r\\n    /// @return _ethValue The ETH value of positions held\\r\\n    function getPositionDetail()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address[] memory _tokens,\\r\\n            uint256[] memory _amounts,\\r\\n            bool _isETH,\\r\\n            uint256 _ethValue\\r\\n        );\\r\\n\\r\\n    /// @notice Return the total assets of strategy in ETH.\\r\\n    function estimatedTotalAssets() external view returns (uint256);\\r\\n\\r\\n    /// @notice Return the 3rd protocol's pool total assets in ETH.\\r\\n    function get3rdPoolAssets() external view returns (uint256);\\r\\n\\r\\n    /// @notice Harvests by the Strategy, \\r\\n    ///     recognizing any profits or losses and adjusting the Strategy's position.\\r\\n    /// @return _rewardsTokens The list of the reward token\\r\\n    /// @return _claimAmounts The list of the reward amount claimed\\r\\n    function harvest() external returns (address[] memory _rewardsTokens, uint256[] memory _claimAmounts);\\r\\n\\r\\n    /// @notice Strategy borrow funds from vault, \\r\\n    ///     enable payable because it needs to receive ETH from vault\\r\\n    /// @param _assets borrow token address\\r\\n    /// @param _amounts borrow token amount\\r\\n    function borrow(address[] memory _assets, uint256[] memory _amounts) external payable;\\r\\n\\r\\n    /// @notice Strategy repay the funds to ETH vault\\r\\n    /// @param _withdrawShares The amount of shares to withdraw\\r\\n    /// @param _totalShares The total amount of shares owned by this strategy\\r\\n    /// @param _outputCode The code of output\\r\\n    /// @return _assets The address list of the assets repaying\\r\\n    /// @return _amounts The amount list of the assets repaying\\r\\n    function repay(\\r\\n        uint256 _withdrawShares,\\r\\n        uint256 _totalShares,\\r\\n        uint256 _outputCode\\r\\n    ) external returns (address[] memory _assets, uint256[] memory _amounts);\\r\\n\\r\\n    /// @notice Return the boolean value of `isWantRatioIgnorable`\\r\\n    function isWantRatioIgnorable() external view returns (bool);\\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.0\"},\"boc-contract-core/contracts/access-control/IAccessControlProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\ninterface IAccessControlProxy {\\n    function isGovOrDelegate(address _account) external view returns (bool);\\n\\n    function isVaultOrGov(address _account) external view returns (bool);\\n\\n    function isKeeperOrVaultOrGov(address _account) external view returns (bool);\\n\\n    function hasRole(bytes32 _role, address _account) external view returns (bool);\\n\\n    function checkRole(bytes32 _role, address _account) external view;\\n\\n    function checkGovOrDelegate(address _account) external view;\\n\\n    function checkVaultOrGov(address _account) external view;\\n\\n    function checkKeeperOrVaultOrGov(address _account) external;\\n}\\n\",\"versionPragma\":\">=0.6.0 <0.9.0\"},\"boc-contract-core/contracts/access-control/AccessControlMixin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"./IAccessControlProxy.sol\\\";\\n\\nabstract contract AccessControlMixin {\\n    IAccessControlProxy public accessControlProxy;\\n\\n    function _initAccessControl(address _accessControlProxy) internal {\\n        accessControlProxy = IAccessControlProxy(_accessControlProxy);\\n    }\\n\\n    modifier hasRole(bytes32 _role, address _account) {\\n        accessControlProxy.checkRole(_role, _account);\\n        _;\\n    }\\n\\n    modifier onlyRole(bytes32 _role) {\\n        accessControlProxy.checkRole(_role, msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyGovOrDelegate() {\\n        accessControlProxy.checkGovOrDelegate(msg.sender);\\n        _;\\n    }\\n\\n    modifier isVaultManager() {\\n        accessControlProxy.checkVaultOrGov(msg.sender);\\n        _;\\n    }\\n\\n    modifier isKeeper() {\\n        accessControlProxy.checkKeeperOrVaultOrGov(msg.sender);\\n        _;\\n    }\\n}\\n\",\"versionPragma\":\">=0.6.0 <0.9.0\"},\"boc-contract-core/contracts/library/BocRoles.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\nlibrary BocRoles {\\n    bytes32 internal constant GOV_ROLE = 0x00;\\n\\n    bytes32 internal constant DELEGATE_ROLE = keccak256(\\\"DELEGATE_ROLE\\\");\\n\\n    bytes32 internal constant VAULT_ROLE = keccak256(\\\"VAULT_ROLE\\\");\\n\\n    bytes32 internal constant KEEPER_ROLE = keccak256(\\\"KEEPER_ROLE\\\");\\n}\\n\",\"versionPragma\":\">=0.6.0 <0.9.0\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.1\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.2\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"boc-contract-core/contracts/library/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x * (10 ** (to - from));\\n        } else if (to < from) {\\n            x = x / (10 ** (from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x * y;\\n        // return 9e36 / 1e18 = 9e18\\n        return z / scale;\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n    internal\\n    pure\\n    returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x * y;\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled + (FULL_SCALE - 1);\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil / FULL_SCALE;\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n    internal\\n    pure\\n    returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x * FULL_SCALE;\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z / y;\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPreciselyScale(uint256 x, uint256 y, uint256 scale)\\n    internal\\n    pure\\n    returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x * scale;\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z / y;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"boc-contract-core/contracts/library/NativeToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\nlibrary NativeToken {\\n    address constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n}\\n\",\"versionPragma\":\">=0.6.0 <0.9.0\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/eth/strategies/ETHBaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"boc-contract-core/contracts/access-control/AccessControlMixin.sol\\\";\\r\\nimport \\\"boc-contract-core/contracts/library/BocRoles.sol\\\";\\r\\nimport \\\"boc-contract-core/contracts/library/StableMath.sol\\\";\\r\\nimport \\\"../oracle/IPriceOracleConsumer.sol\\\";\\r\\nimport \\\"../vault/IETHVault.sol\\\";\\r\\nimport \\\"boc-contract-core/contracts/library/NativeToken.sol\\\";\\r\\n\\r\\nimport \\\"./IETHStrategy.sol\\\";\\r\\n\\r\\n/// @title ETHBaseStrategy\\r\\n/// @author Bank of Chain Protocol Inc\\r\\nabstract contract ETHBaseStrategy is IETHStrategy, Initializable, AccessControlMixin, ReentrancyGuardUpgradeable {\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n    using StableMath for uint256;\\r\\n\\r\\n    /// @param _outputCode The code of output,0:default path, Greater than 0:specify output path\\r\\n    /// @param outputTokens The output tokens\\r\\n    struct OutputInfo {\\r\\n        uint256 outputCode;\\r\\n        address[] outputTokens;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IETHStrategy\\r\\n    IETHVault public override vault;\\r\\n\\r\\n    /// @notice The interface of PriceOracleConsumer contract\\r\\n    IPriceOracleConsumer public priceOracleConsumer;\\r\\n\\r\\n    /// @inheritdoc IETHStrategy\\r\\n    uint16 public override protocol;\\r\\n\\r\\n    /// @inheritdoc IETHStrategy\\r\\n    string public override name;\\r\\n\\r\\n    /// @notice The list of tokens wanted by this strategy\\r\\n    address[] public wants;\\r\\n\\r\\n    /// @inheritdoc IETHStrategy\\r\\n    bool public override isWantRatioIgnorable;\\r\\n    \\r\\n    /// @dev Modifier that checks that msg.sender is the vault or not\\r\\n    modifier onlyVault() {\\r\\n        require(msg.sender == address(vault));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n    fallback() external payable {}\\r\\n\\r\\n    function _initialize(\\r\\n        address _vault,\\r\\n        uint16 _protocol,\\r\\n        string memory _name,\\r\\n        address[] memory _wants\\r\\n    ) internal {\\r\\n        protocol = _protocol;\\r\\n        vault = IETHVault(_vault);\\r\\n\\r\\n        priceOracleConsumer = IPriceOracleConsumer(vault.priceProvider());\\r\\n\\r\\n        _initAccessControl(vault.accessControlProxy());\\r\\n\\r\\n        name = _name;\\r\\n        require(_wants.length > 0, \\\"wants is required\\\");\\r\\n        wants = _wants;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IETHStrategy\\r\\n    function getVersion() external pure virtual override returns (string memory);\\r\\n\\r\\n\\r\\n    /// @notice Sets the flag of `isWantRatioIgnorable` \\r\\n    /// @param _isWantRatioIgnorable \\\"true\\\" means that can ignore ratios given by wants info,\\r\\n    ///    \\\"false\\\" is the opposite.\\r\\n    function setIsWantRatioIgnorable(bool _isWantRatioIgnorable) external isVaultManager {\\r\\n        bool _oldValue = isWantRatioIgnorable;\\r\\n        isWantRatioIgnorable = _isWantRatioIgnorable;\\r\\n        emit SetIsWantRatioIgnorable(_oldValue, _isWantRatioIgnorable);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IETHStrategy\\r\\n    function getWantsInfo()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address[] memory _assets, uint256[] memory _ratios);\\r\\n\\r\\n    /// @inheritdoc IETHStrategy\\r\\n    function getWants() external view override returns (address[] memory) {\\r\\n        return wants;\\r\\n    }\\r\\n\\r\\n    // @notice Return the output path list of the strategy when withdraw.\\r\\n    function getOutputsInfo() external view virtual returns (OutputInfo[] memory _outputsInfo);\\r\\n\\r\\n    /// @inheritdoc IETHStrategy\\r\\n    function getPositionDetail()\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (\\r\\n            address[] memory _tokens,\\r\\n            uint256[] memory _amounts,\\r\\n            bool _isETH,\\r\\n            uint256 _ethValue\\r\\n        );\\r\\n\\r\\n    /// @inheritdoc IETHStrategy\\r\\n    function estimatedTotalAssets() external view override returns (uint256 _assetsInETH) {\\r\\n        (\\r\\n            address[] memory _tokens,\\r\\n            uint256[] memory _amounts,\\r\\n            bool _isETH,\\r\\n            uint256 _ethValue\\r\\n        ) = getPositionDetail();\\r\\n        if (_isETH) {\\r\\n            _assetsInETH = _ethValue;\\r\\n        } else {\\r\\n            for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n                uint256 _amount = _amounts[i];\\r\\n                if (_amount > 0) {\\r\\n                    _assetsInETH += queryTokenValueInETH(_tokens[i], _amount);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IETHStrategy\\r\\n    function get3rdPoolAssets() external view virtual override returns (uint256);\\r\\n\\r\\n    /// @inheritdoc IETHStrategy\\r\\n    function harvest() external virtual override returns (address[] memory _rewardsTokens, uint256[] memory _claimAmounts){\\r\\n        vault.report(_rewardsTokens,_claimAmounts);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IETHStrategy\\r\\n    function borrow(address[] memory _assets, uint256[] memory _amounts)\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n        onlyVault\\r\\n    {\\r\\n        depositTo3rdPool(_assets, _amounts);\\r\\n\\r\\n        emit Borrow(_assets, _amounts);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IETHStrategy\\r\\n    function repay(\\r\\n        uint256 _repayShares,\\r\\n        uint256 _totalShares,\\r\\n        uint256 _outputCode\\r\\n    ) public virtual override onlyVault nonReentrant returns (address[] memory _assets, uint256[] memory _amounts) {\\r\\n        require(_repayShares > 0 && _totalShares >= _repayShares, \\\"cannot repay 0 shares\\\");\\r\\n        _assets = wants;\\r\\n        uint256[] memory _balancesBefore = new uint256[](_assets.length);\\r\\n        for (uint256 i = 0; i < _assets.length; i++) {\\r\\n            _balancesBefore[i] = balanceOfToken(_assets[i]);\\r\\n        }\\r\\n\\r\\n        withdrawFrom3rdPool(_repayShares, _totalShares,_outputCode);\\r\\n        _amounts = new uint256[](_assets.length);\\r\\n        for (uint256 i = 0; i < _assets.length; i++) {\\r\\n            uint256 _balanceAfter = balanceOfToken(_assets[i]);\\r\\n            _amounts[i] =\\r\\n                _balanceAfter -\\r\\n                _balancesBefore[i] +\\r\\n                (_balancesBefore[i] * _repayShares) /\\r\\n                _totalShares;\\r\\n        }\\r\\n\\r\\n        transferTokensToTarget(address(vault), _assets, _amounts);\\r\\n\\r\\n        emit Repay(_repayShares, _totalShares, _assets, _amounts);\\r\\n    }\\r\\n\\r\\n    /// @notice Strategy deposit funds to third party pool.\\r\\n    /// @param _assets the address list of token to deposit\\r\\n    /// @param _amounts the amount list of token to deposit\\r\\n    function depositTo3rdPool(address[] memory _assets, uint256[] memory _amounts)\\r\\n        internal\\r\\n        virtual;\\r\\n\\r\\n    /// @notice Strategy withdraw the funds from third party pool\\r\\n    /// @param _withdrawShares The amount of shares to withdraw\\r\\n    /// @param _totalShares The total amount of shares owned by this strategy\\r\\n    /// @param _outputCode The code of output\\r\\n    function withdrawFrom3rdPool(\\r\\n        uint256 _withdrawShares,\\r\\n        uint256 _totalShares,\\r\\n        uint256 _outputCode\\r\\n    ) internal virtual;\\r\\n\\r\\n    /// @notice Return the token's balance Of this contract\\r\\n    function balanceOfToken(address _tokenAddress) internal view returns (uint256) {\\r\\n        if (_tokenAddress == NativeToken.NATIVE_TOKEN) {\\r\\n            return address(this).balance;\\r\\n        }\\r\\n        return IERC20Upgradeable(_tokenAddress).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Return the investable amount of strategy in ETH\\r\\n    function poolQuota() public view virtual returns (uint256) {\\r\\n        return type(uint256).max;\\r\\n    }\\r\\n\\r\\n    /// @notice Return the value of token in ETH\\r\\n    function queryTokenValueInETH(address _token, uint256 _amount)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 _valueInETH)\\r\\n    {\\r\\n        if (_token == NativeToken.NATIVE_TOKEN) {\\r\\n            _valueInETH = _amount;\\r\\n        } else {\\r\\n            _valueInETH = priceOracleConsumer.valueInEth(_token, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Return the uint with decimal of one token\\r\\n    function decimalUnitOfToken(address _token) internal view returns (uint256) {\\r\\n        if (_token == NativeToken.NATIVE_TOKEN) {\\r\\n            return 1e18;\\r\\n        }\\r\\n        return 10**IERC20MetadataUpgradeable(_token).decimals();\\r\\n    }\\r\\n\\r\\n    /// @notice Transfer `_assets` token from this contract to target address.\\r\\n    /// @param _target The target address to receive token\\r\\n    /// @param _assets the address list of token to transfer\\r\\n    /// @param _amounts the amount list of token to transfer\\r\\n    function transferTokensToTarget(\\r\\n        address _target,\\r\\n        address[] memory _assets,\\r\\n        uint256[] memory _amounts\\r\\n    ) internal {\\r\\n        for (uint256 i = 0; i < _assets.length; i++) {\\r\\n            uint256 _amount = _amounts[i];\\r\\n            if (_amount > 0) {\\r\\n                if (_assets[i] == NativeToken.NATIVE_TOKEN) {\\r\\n                    payable(_target).transfer(_amount);\\r\\n                } else {\\r\\n                    IERC20Upgradeable(_assets[i]).safeTransfer(address(_target), _amount);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/external/aave/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title LendingPoolAddressesProvider contract\\r\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\r\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\r\\n **/\\r\\ninterface ILendingPoolAddressesProvider {\\r\\n    event MarketIdSet(string newMarketId);\\r\\n    event LendingPoolUpdated(address indexed newAddress);\\r\\n    event ConfigurationAdminUpdated(address indexed newAddress);\\r\\n    event EmergencyAdminUpdated(address indexed newAddress);\\r\\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\\r\\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\r\\n    event PriceOracleUpdated(address indexed newAddress);\\r\\n    event LendingRateOracleUpdated(address indexed newAddress);\\r\\n    event ProxyCreated(bytes32 id, address indexed newAddress);\\r\\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\r\\n\\r\\n    function getMarketId() external view returns (string memory);\\r\\n\\r\\n    function setMarketId(string calldata marketId) external;\\r\\n\\r\\n    function setAddress(bytes32 id, address newAddress) external;\\r\\n\\r\\n    function setAddressAsProxy(bytes32 id, address impl) external;\\r\\n\\r\\n    function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n    function getLendingPool() external view returns (address);\\r\\n\\r\\n    function setLendingPoolImpl(address pool) external;\\r\\n\\r\\n    function getLendingPoolConfigurator() external view returns (address);\\r\\n\\r\\n    function setLendingPoolConfiguratorImpl(address configurator) external;\\r\\n\\r\\n    function getLendingPoolCollateralManager() external view returns (address);\\r\\n\\r\\n    function setLendingPoolCollateralManager(address manager) external;\\r\\n\\r\\n    function getPoolAdmin() external view returns (address);\\r\\n\\r\\n    function setPoolAdmin(address admin) external;\\r\\n\\r\\n    function getEmergencyAdmin() external view returns (address);\\r\\n\\r\\n    function setEmergencyAdmin(address admin) external;\\r\\n\\r\\n    function getPriceOracle() external view returns (address);\\r\\n\\r\\n    function setPriceOracle(address priceOracle) external;\\r\\n\\r\\n    function getLendingRateOracle() external view returns (address);\\r\\n\\r\\n    function setLendingRateOracle(address lendingRateOracle) external;\\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/external/aave/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\r\\n    struct ReserveData {\\r\\n        //stores the reserve configuration\\r\\n        ReserveConfigurationMap configuration;\\r\\n        //the liquidity index. Expressed in ray\\r\\n        uint128 liquidityIndex;\\r\\n        //variable borrow index. Expressed in ray\\r\\n        uint128 variableBorrowIndex;\\r\\n        //the current supply rate. Expressed in ray\\r\\n        uint128 currentLiquidityRate;\\r\\n        //the current variable borrow rate. Expressed in ray\\r\\n        uint128 currentVariableBorrowRate;\\r\\n        //the current stable borrow rate. Expressed in ray\\r\\n        uint128 currentStableBorrowRate;\\r\\n        uint40 lastUpdateTimestamp;\\r\\n        //tokens addresses\\r\\n        address aTokenAddress;\\r\\n        address stableDebtTokenAddress;\\r\\n        address variableDebtTokenAddress;\\r\\n        //address of the interest rate strategy\\r\\n        address interestRateStrategyAddress;\\r\\n        //the id of the reserve. Represents the position in the list of the active reserves\\r\\n        uint8 id;\\r\\n    }\\r\\n\\r\\n    struct ReserveConfigurationMap {\\r\\n        //bit 0-15: LTV\\r\\n        //bit 16-31: Liq. threshold\\r\\n        //bit 32-47: Liq. bonus\\r\\n        //bit 48-55: Decimals\\r\\n        //bit 56: Reserve is active\\r\\n        //bit 57: reserve is frozen\\r\\n        //bit 58: borrowing is enabled\\r\\n        //bit 59: stable rate borrowing enabled\\r\\n        //bit 60-63: reserved\\r\\n        //bit 64-79: reserve factor\\r\\n        uint256 data;\\r\\n    }\\r\\n\\r\\n    struct UserConfigurationMap {\\r\\n        uint256 data;\\r\\n    }\\r\\n\\r\\n    enum InterestRateMode {\\r\\n        NONE,\\r\\n        STABLE,\\r\\n        VARIABLE\\r\\n    }\\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/external/aave/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\r\\nimport {DataTypes} from './DataTypes.sol';\\r\\n\\r\\ninterface ILendingPool {\\r\\n\\r\\n\\r\\n  /**\\r\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\r\\n   * @param asset The address of the underlying asset to deposit\\r\\n   * @param amount The amount to be deposited\\r\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n   *   is a different wallet\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function deposit(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address onBehalfOf,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\r\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\r\\n   * @param asset The address of the underlying asset to withdraw\\r\\n   * @param amount The underlying amount to be withdrawn\\r\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\r\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\r\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\r\\n   *   different wallet\\r\\n   * @return The final amount withdrawn\\r\\n   **/\\r\\n  function withdraw(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address to\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\r\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\r\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\r\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\r\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\r\\n   * @param asset The address of the underlying asset to borrow\\r\\n   * @param amount The amount to be borrowed\\r\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\r\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\r\\n   * if he has been given credit delegation allowance\\r\\n   **/\\r\\n  function borrow(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 interestRateMode,\\r\\n    uint16 referralCode,\\r\\n    address onBehalfOf\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\r\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\r\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n   * @param amount The amount to repay\\r\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n   * other borrower whose debt should be removed\\r\\n   * @return The final amount repaid\\r\\n   **/\\r\\n  function repay(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 rateMode,\\r\\n    address onBehalfOf\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\r\\n   * @param asset The address of the underlying asset borrowed\\r\\n   * @param rateMode The rate mode that the user wants to swap to\\r\\n   **/\\r\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\r\\n   * - Users can be rebalanced if the following conditions are satisfied:\\r\\n   *     1. Usage ratio is above 95%\\r\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\r\\n   *        borrowed at a stable rate and depositors are not earning enough\\r\\n   * @param asset The address of the underlying asset borrowed\\r\\n   * @param user The address of the user to be rebalanced\\r\\n   **/\\r\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\r\\n   * @param asset The address of the underlying asset deposited\\r\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\r\\n   **/\\r\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\r\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\r\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\r\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n   * @param user The address of the borrower getting liquidated\\r\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n   * to receive the underlying collateral asset directly\\r\\n   **/\\r\\n  function liquidationCall(\\r\\n    address collateralAsset,\\r\\n    address debtAsset,\\r\\n    address user,\\r\\n    uint256 debtToCover,\\r\\n    bool receiveAToken\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n   * as long as the amount taken plus a fee is returned.\\r\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\r\\n   * For further details please visit https://developers.aave.com\\r\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\r\\n   * @param assets The addresses of the assets being flash-borrowed\\r\\n   * @param amounts The amounts amounts being flash-borrowed\\r\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\r\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\r\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\r\\n   * @param params Variadic packed params to pass to the receiver as extra information\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function flashLoan(\\r\\n    address receiverAddress,\\r\\n    address[] calldata assets,\\r\\n    uint256[] calldata amounts,\\r\\n    uint256[] calldata modes,\\r\\n    address onBehalfOf,\\r\\n    bytes calldata params,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the user account data across all the reserves\\r\\n   * @param user The address of the user\\r\\n   * @return totalCollateralETH the total collateral in ETH of the user\\r\\n   * @return totalDebtETH the total debt in ETH of the user\\r\\n   * @return availableBorrowsETH the borrowing power left of the user\\r\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\r\\n   * @return ltv the loan to value of the user\\r\\n   * @return healthFactor the current health factor of the user\\r\\n   **/\\r\\n  function getUserAccountData(address user)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256 totalCollateralETH,\\r\\n      uint256 totalDebtETH,\\r\\n      uint256 availableBorrowsETH,\\r\\n      uint256 currentLiquidationThreshold,\\r\\n      uint256 ltv,\\r\\n      uint256 healthFactor\\r\\n    );\\r\\n\\r\\n  function initReserve(\\r\\n    address reserve,\\r\\n    address aTokenAddress,\\r\\n    address stableDebtAddress,\\r\\n    address variableDebtAddress,\\r\\n    address interestRateStrategyAddress\\r\\n  ) external;\\r\\n\\r\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\r\\n    external;\\r\\n\\r\\n  function setConfiguration(address reserve, uint256 configuration) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the configuration of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The configuration of the reserve\\r\\n   **/\\r\\n  function getConfiguration(address asset)\\r\\n    external\\r\\n    view\\r\\n    returns (DataTypes.ReserveConfigurationMap memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the configuration of the user across all the reserves\\r\\n   * @param user The user address\\r\\n   * @return The configuration of the user\\r\\n   **/\\r\\n  function getUserConfiguration(address user)\\r\\n    external\\r\\n    view\\r\\n    returns (DataTypes.UserConfigurationMap memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the normalized income normalized income of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The reserve's normalized income\\r\\n   */\\r\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the normalized variable debt per unit of asset\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The reserve normalized variable debt\\r\\n   */\\r\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the state and configuration of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The state of the reserve\\r\\n   **/\\r\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\r\\n\\r\\n  function finalizeTransfer(\\r\\n    address asset,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount,\\r\\n    uint256 balanceFromAfter,\\r\\n    uint256 balanceToBefore\\r\\n  ) external;\\r\\n\\r\\n  function getReservesList() external view returns (address[] memory);\\r\\n\\r\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\r\\n\\r\\n  function setPause(bool val) external;\\r\\n\\r\\n  function paused() external view returns (bool);\\r\\n}\",\"versionPragma\":\"^0.8.0\"},\"contracts/external/aave/UserConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title UserConfiguration library\\r\\n * @author Aave\\r\\n * @notice Implements the bitmap logic to handle the user configuration\\r\\n */\\r\\nlibrary UserConfiguration {\\r\\n    uint256 internal constant BORROWING_MASK =\\r\\n    0x5555555555555555555555555555555555555555555555555555555555555555;\\r\\n\\r\\n    /**\\r\\n     * @dev Used to validate if a user has been using the reserve for borrowing or as collateral\\r\\n   * @param _dataLocal The configuration object data\\r\\n   * @param reserveIndex The index of the reserve in the bitmap\\r\\n   * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise\\r\\n   **/\\r\\n    function isUsingAsCollateralOrBorrowing(uint256 _dataLocal, uint256 reserveIndex)\\r\\n    internal\\r\\n    pure\\r\\n    returns (bool)\\r\\n    {\\r\\n        require(reserveIndex < 128, \\\"UL_INVALID_INDEX\\\");\\r\\n        return (_dataLocal >> (reserveIndex * 2)) & 3 != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Used to validate if a user has been using the reserve for borrowing\\r\\n   * @param _dataLocal The configuration object data\\r\\n   * @param reserveIndex The index of the reserve in the bitmap\\r\\n   * @return True if the user has been using a reserve for borrowing, false otherwise\\r\\n   **/\\r\\n    function isBorrowing(uint256 _dataLocal, uint256 reserveIndex)\\r\\n    internal\\r\\n    pure\\r\\n    returns (bool)\\r\\n    {\\r\\n        require(reserveIndex < 128, \\\"UL_INVALID_INDEX\\\");\\r\\n        return (_dataLocal >> (reserveIndex * 2)) & 1 != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Used to validate if a user has been using the reserve as collateral\\r\\n   * @param _dataLocal The configuration object data\\r\\n   * @param reserveIndex The index of the reserve in the bitmap\\r\\n   * @return True if the user has been using a reserve as collateral, false otherwise\\r\\n   **/\\r\\n    function isUsingAsCollateral(uint256 _dataLocal, uint256 reserveIndex)\\r\\n    internal\\r\\n    pure\\r\\n    returns (bool)\\r\\n    {\\r\\n        require(reserveIndex < 128, \\\"UL_INVALID_INDEX\\\");\\r\\n        return (_dataLocal >> (reserveIndex * 2 + 1)) & 1 != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Used to validate if a user has been borrowing from any reserve\\r\\n   * @param _dataLocal The configuration object data\\r\\n   * @return True if the user has been borrowing any reserve, false otherwise\\r\\n   **/\\r\\n    function isBorrowingAny(uint256 _dataLocal) internal pure returns (bool) {\\r\\n        return _dataLocal & BORROWING_MASK != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Used to validate if a user has not been using any reserve\\r\\n   * @param _dataLocal The configuration object data\\r\\n   * @return True if the user has been borrowing any reserve, false otherwise\\r\\n   **/\\r\\n    function isEmpty(uint256 _dataLocal) internal pure returns (bool) {\\r\\n        return _dataLocal == 0;\\r\\n    }\\r\\n}\",\"versionPragma\":\"^0.8.0\"},\"contracts/external/aave/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPriceOracleGetter {\\r\\n  /// @notice Gets an asset price by address\\r\\n  /// @param asset The asset address\\r\\n  function getAssetPrice(address asset) external view returns (uint256);\\r\\n  /// @notice Gets a list of prices from a list of assets addresses\\r\\n  /// @param assets The list of assets addresses\\r\\n  function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\\r\\n}\",\"versionPragma\":\"^0.8.0\"},\"contracts/external/curve/ICurveLiquidityFarmingPool.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface ICurveLiquidityFarmingPool {\\r\\n\\r\\n    function exchange(\\r\\n        int128 from,\\r\\n        int128 to,\\r\\n        uint256 _from_amount,\\r\\n        uint256 _min_to_amount\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    function balances(uint256) external view returns (uint256);\\r\\n\\r\\n    function fee() external view returns (uint256);\\r\\n\\r\\n    function get_dy(\\r\\n        int128 from,\\r\\n        int128 to,\\r\\n        uint256 _from_amount\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n}\",\"versionPragma\":\">=0.8.0 <0.9.0\"},\"contracts/external/weth/IWeth.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IWeth {\\r\\n    function deposit() external payable;\\r\\n    function withdraw(uint256 wad) external;\\r\\n}\",\"versionPragma\":\">=0.8.0 <0.9.0\"}}}","address":"0x06b3244b086cecC40F1e5A826f736Ded68068a0F","bytecode":"0x608060405234801561001057600080fd5b50613e21806100206000396000f3fe60806040526004361061021d5760003560e01c80637d7c2a1c11610123578063ad83885f116100ab578063efbb5cb01161006f578063efbb5cb014610640578063f399e22e14610655578063f48c738814610675578063f4f9f7fd14610695578063fbfa77cf146106bd57610224565b8063ad83885f146105be578063adc58dd9146105de578063c292614b146105f3578063d8a8bf5c14610609578063ed65cb001461062b57610224565b80638e479b0c116100f25780638e479b0c1461051a5780638f1f02b31461052f5780638fc745291461054f578063970d44ee1461056f5780639de77d1e1461059957610224565b80637d7c2a1c146104885780637dc71a721461049d578063895a7485146104c55780638ce74426146104e557610224565b806339e5274c116101a6578063677159351161017557806367715935146103e25780636bff31c3146104085780636f94a7211461041e578063775dc046146104485780637d1b623a1461046857610224565b806339e5274c146103625780634641257d1461037557806347ddbcfe1461039857806364440b37146103ba57610224565b80630d8e6e2c116101ed5780630d8e6e2c146102c6578063189e9f88146102f45780631fa8970c14610314578063249d39e91461032a578063338346d21461034057610224565b806240e09b146102265780630504a2881461026b57806306fdde031461028f578063099d1eb0146102b157610224565b3661022457005b005b34801561023257600080fd5b5061024e73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561027757600080fd5b5061028160395481565b604051908152602001610262565b34801561029b57600080fd5b506102a46106dd565b6040516102629190613b4b565b3480156102bd57600080fd5b50610281601f81565b3480156102d257600080fd5b506040805180820190915260058152640312e302e360dc1b60208201526102a4565b34801561030057600080fd5b5061024e61030f36600461392c565b61076b565b34801561032057600080fd5b50610281603a5481565b34801561033657600080fd5b5061028161271081565b34801561034c57600080fd5b5061024e600080516020613dcc83398151915281565b61022461037036600461380c565b610795565b34801561038157600080fd5b5061038a6107f3565b604051610262929190613a71565b3480156103a457600080fd5b506103ad610860565b6040516102629190613ad8565b3480156103c657600080fd5b5061024e73030ba81f1c18d280636f32af80b9aad02cf0854e81565b3480156103ee57600080fd5b5060005461024e906201000090046001600160a01b031681565b34801561041457600080fd5b50610281603b5481565b34801561042a57600080fd5b5061043361093d565b60408051928352602083019190915201610262565b34801561045457600080fd5b5061022461046336600461392c565b610a68565b34801561047457600080fd5b5061022461048336600461392c565b610b4a565b34801561049457600080fd5b50610224610c0d565b3480156104a957600080fd5b5061024e73f63b34710400cad3e044cffdcab00a0f32e33ecf81565b3480156104d157600080fd5b5061038a6104e036600461395c565b610eea565b3480156104f157600080fd5b5060345461050790600160a01b900461ffff1681565b60405161ffff9091168152602001610262565b34801561052657600080fd5b5061028161128d565b34801561053b57600080fd5b5061022461054a36600461392c565b61131c565b34801561055b57600080fd5b5061022461056a3660046138cf565b6113d2565b34801561057b57600080fd5b506037546105899060ff1681565b6040519015158152602001610262565b3480156105a557600080fd5b506105ae611483565b6040516102629493929190613a9f565b3480156105ca57600080fd5b5060345461024e906001600160a01b031681565b3480156105ea57600080fd5b5061038a611604565b3480156105ff57600080fd5b5061028160385481565b34801561061557600080fd5b5061061e6116d4565b6040516102629190613a5e565b34801561063757600080fd5b50600019610281565b34801561064c57600080fd5b50610281611736565b34801561066157600080fd5b5061022461067036600461376a565b6117f7565b34801561068157600080fd5b5061022461069036600461392c565b6119ea565b3480156106a157600080fd5b5061024e731982b2f5814301d4e9a8b0201555376e62f8242881565b3480156106c957600080fd5b5060335461024e906001600160a01b031681565b603580546106ea90613d23565b80601f016020809104026020016040519081016040528092919081815260200182805461071690613d23565b80156107635780601f1061073857610100808354040283529160200191610763565b820191906000526020600020905b81548152906001019060200180831161074657829003601f168201915b505050505081565b6036818154811061077b57600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b031633146107ac57600080fd5b6107b68282611aad565b7fb8979beef99ce8cedd10830934327a8b83c5acffc54693c718ef9e2c91080ec882826040516107e7929190613a71565b60405180910390a15050565b603354604051631e8de77b60e01b815260609182916001600160a01b0390911690631e8de77b9061082a9084908190600401613a71565b600060405180830381600087803b15801561084457600080fd5b505af1158015610858573d6000803e3d6000fd5b505050509091565b604080516001808252818301909252606091816020015b6040805180820190915260008152606060208201528152602001906001900390816108775790505090506000816000815181106108c457634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816000018181525050603680548060200260200160405190810160405280929190818152602001828054801561092f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610911575b505050506020909201525090565b600080600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561098f57600080fd5b505afa1580156109a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c7919061374e565b60405163b3596f0760e01b8152600080516020613dcc83398151915260048201529091506000906001600160a01b0383169063b3596f079060240160206040518083038186803b158015610a1a57600080fd5b505afa158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a529190613944565b9050610a5d81611f5d565b909590945092505050565b600054604051632e22bacf60e01b8152336004820152620100009091046001600160a01b031690632e22bacf9060240160006040518083038186803b158015610ab057600080fd5b505afa158015610ac4573d6000803e3d6000fd5b5050505061271081108015610adb5750603a548110155b8015610ae957506039548111155b610b0e5760405162461bcd60e51b8152600401610b0590613bcc565b60405180910390fd5b60388190556040518181527fa8a7709841b33ad4d0c929fb387a1c191ed2754c7127c4324dcaf7c0b1feb6c9906020015b60405180910390a150565b600054604051632e22bacf60e01b8152336004820152620100009091046001600160a01b031690632e22bacf9060240160006040518083038186803b158015610b9257600080fd5b505afa158015610ba6573d6000803e3d6000fd5b5050505061271081108015610bbc575060385481115b610bd85760405162461bcd60e51b8152600401610b0590613bcc565b60398190556040518181527ff98b2d5c625a7a24d45fbccf6d5cf245c902aed5191f5d9a82664431950d88a690602001610b3f565b6000546040516311aec98d60e01b8152336004820152620100009091046001600160a01b0316906311aec98d90602401600060405180830381600087803b158015610c5757600080fd5b505af1158015610c6b573d6000803e3d6000fd5b50505050600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cbe57600080fd5b505afa158015610cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf6919061374e565b9050600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4757600080fd5b505afa158015610d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7f919061374e565b60405163b3596f0760e01b8152600080516020613dcc83398151915260048201529091506000906001600160a01b0383169063b3596f079060240160206040518083038186803b158015610dd257600080fd5b505afa158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0a9190613944565b9050600080610e1883611f5d565b91509150600a821115610e7357603b546038548360005b83811015610e6a57600a821115610e5357610e4c8284898c612229565b9150610e58565b610e6a565b80610e6281613d5e565b915050610e2f565b50505050610e97565b8015610e9757806000610e87826003613cc1565b9050610e948282876125a7565b50505b6000610ea38284613c89565b1115610ee35760408051838152602081018390527f0b33d39bbef101ecc4f5ef04e6d3a125c9fb745a418dac380e2a9460f8200dc8910160405180910390a15b5050505050565b60335460609081906001600160a01b03163314610f0657600080fd5b60026001541415610f595760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b05565b60026001558415801590610f6d5750848410155b610fb15760405162461bcd60e51b815260206004820152601560248201527463616e6e6f7420726570617920302073686172657360581b6044820152606401610b05565b603680548060200260200160405190810160405280929190818152602001828054801561100757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610fe9575b505050505091506000825167ffffffffffffffff81111561103857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611061578160200160208202803683370190505b50905060005b83518110156110dd576110a084828151811061109357634e487b7160e01b600052603260045260246000fd5b6020026020010151612a9b565b8282815181106110c057634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806110d581613d5e565b915050611067565b506110e9868686612b48565b825167ffffffffffffffff81111561111157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561113a578160200160208202803683370190505b50915060005b835181101561122957600061116e85838151811061109357634e487b7160e01b600052603260045260246000fd5b9050868884848151811061119257634e487b7160e01b600052603260045260246000fd5b60200260200101516111a49190613cc1565b6111ae9190613ca1565b8383815181106111ce57634e487b7160e01b600052603260045260246000fd5b6020026020010151826111e19190613ce0565b6111eb9190613c89565b84838151811061120b57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152508061122181613d5e565b915050611140565b50603354611241906001600160a01b03168484612d6c565b7f4f80ed973ad44caebda6b6d59164f6f2229a654b3790513fe6c96957d1c9207e868685856040516112769493929190613c03565b60405180910390a150600180559094909350915050565b6000611317600080516020613dcc833981519152806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112da57600080fd5b505afa1580156112ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113129190613944565b612e96565b905090565b600054604051632e22bacf60e01b8152336004820152620100009091046001600160a01b031690632e22bacf9060240160006040518083038186803b15801561136457600080fd5b505afa158015611378573d6000803e3d6000fd5b50505050600a81111561139d5760405162461bcd60e51b8152600401610b0590613bcc565b603b8190556040518181527f0cdc341e082dbd0a46614b1d9c2f4eef310ba014b58b1335b5b0f1762392669290602001610b3f565b600054604051632e22bacf60e01b8152336004820152620100009091046001600160a01b031690632e22bacf9060240160006040518083038186803b15801561141a57600080fd5b505afa15801561142e573d6000803e3d6000fd5b50506037805484151560ff19821681179092556040805160ff909216801515835260208301939093529193507f748cca965f8cddafc66f534e5ea09ded831ccf043014eda1673ea057aa0192d49250016107e7565b60608060008060368054806020026020016040519081016040528092919081815260200182805480156114df57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116114c1575b50939750600193506114f092505050565b604051908082528060200260200182016040528015611519578160200160208202803683370190505b509250600061153b73f63b34710400cad3e044cffdcab00a0f32e33ecf612a9b565b9050600061155c73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee612a9b565b61157973c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2612a9b565b6115839190613c89565b9050600061159e600080516020613dcc833981519152612a9b565b6115bb731982b2f5814301d4e9a8b0201555376e62f82428612a9b565b6115c59190613c89565b90506001945082826115e5600080516020613dcc83398151915284612e96565b6115ef9190613c89565b6115f99190613ce0565b935050505090919293565b606080603680548060200260200160405190810160405280929190818152602001828054801561165d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161163f575b509395506001935061166e92505050565b604051908082528060200260200182016040528015611697578160200160208202803683370190505b509050670de0b6b3a7640000816000815181106116c457634e487b7160e01b600052603260045260246000fd5b6020026020010181815250509091565b6060603680548060200260200160405190810160405280929190818152602001828054801561172c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161170e575b5050505050905090565b6000806000806000611746611483565b9350935093509350811561175c578094506117f0565b60005b84518110156117ee57600084828151811061178a57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008111156117db576117ce8683815181106117c057634e487b7160e01b600052603260045260246000fd5b602002602001015182612e96565b6117d89088613c89565b96505b50806117e681613d5e565b91505061175f565b505b5050505090565b60006118036001612f51565b9050801561181b576000805461ff0019166101001790555b6040805160018082528183019092526000916020808301908036833701905050905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8160008151811061187357634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101820152611a2c603855611964603a55611af46039556003603b5560408051630261bf8b60e01b8152905160009273b53c1a33016b2dc2ff3653530bff1848a515c8c592630261bf8b9260048083019392829003018186803b1580156118eb57600080fd5b505afa1580156118ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611923919061374e565b9050611940600080516020613dcc83398151915282600019612fd6565b61196173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc282600019612fd6565b611990600080516020613dcc83398151915273dc24316b9ae028f1497c275eb9192a3ea0f67022600019612fd6565b61199d856007868561312d565b505080156119e5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600054604051632e22bacf60e01b8152336004820152620100009091046001600160a01b031690632e22bacf9060240160006040518083038186803b158015611a3257600080fd5b505afa158015611a46573d6000803e3d6000fd5b5050505061271081108015611a5c575060385481105b611a785760405162461bcd60e51b8152600401610b0590613bcc565b603a8190556040518181527f5a034ae82b3b759c632314559ed0f79bd3b337c742eebd009e8ef8cf3950a4c290602001610b3f565b600081600081518110611ad057634e487b7160e01b600052603260045260246000fd5b6020908102919091010151604051630f7c084960e21b81526000600482018190526001602483015260448201839052606482015290915073dc24316b9ae028f1497c275eb9192a3ea0f6702290633df021249083906084016020604051808303818588803b158015611b4157600080fd5b505af1158015611b55573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611b7a9190613944565b506000611b94600080516020613dcc833981519152612a9b565b90508015611f5757600080600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bee57600080fd5b505afa158015611c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c26919061374e565b90506000819050600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7c57600080fd5b505afa158015611c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb4919061374e565b60405163b3596f0760e01b8152600080516020613dcc83398151915260048201529091506001600160a01b0382169063b3596f079060240160206040518083038186803b158015611d0457600080fd5b505afa158015611d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3c9190613944565b93506000611d5d731982b2f5814301d4e9a8b0201555376e62f82428612a9b565b60405163e8eda9df60e01b8152600080516020613dcc833981519152600482015260248101899052306044820152600060648201529091506001600160a01b0384169063e8eda9df90608401600060405180830381600087803b158015611dc357600080fd5b505af1158015611dd7573d6000803e3d6000fd5b5050604051634417a58360e01b8152306004820152600092506001600160a01b0387169150634417a5839060240160206040518083038186803b158015611e1d57600080fd5b505afa158015611e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e559190613907565b519050611e6381601f6132ff565b611ed657604051635a3b74b960e01b8152600080516020613dcc8339815191526004820152600160248201526001600160a01b03861690635a3b74b990604401600060405180830381600087803b158015611ebd57600080fd5b505af1158015611ed1573d6000803e3d6000fd5b505050505b5080611ef5731982b2f5814301d4e9a8b0201555376e62f82428612a9b565b611eff9190613ce0565b603b5460385491975093509150600090505b82811015611f5057600a861115611f39576000611f3087848888612229565b9650611f3e9050565b611f50565b80611f4881613d5e565b915050611f11565b5050505050505b50505050565b603854603954603a54603b5460009384938693919290919061271090819081908190819081908b5b8181101561200e57612710611f9a8c87613cc1565b611fa49190613ca1565b9450611fb08589613c89565b9750612710611fbf8b86613cc1565b611fc99190613ca1565b9350611fd58488613c89565b9650612710611fe48a85613cc1565b611fee9190613ca1565b9250611ffa8387613c89565b95508061200681613d5e565b915050611f85565b5050505050600061203273f63b34710400cad3e044cffdcab00a0f32e33ecf612a9b565b905060008080808b61204c86670de0b6b3a7640000613cc1565b6120569190613ca1565b905061206461271089613ce0565b61206e8983613cc1565b6120789190613ca1565b935061208661271088613ce0565b6120908883613cc1565b61209a9190613ca1565b92506120a861271087613ce0565b6120b28783613cc1565b6120bc9190613ca1565b91505060006120de731982b2f5814301d4e9a8b0201555376e62f82428612a9b565b905080831115612203578b6120f56127108a613ce0565b6120ff9190613cc1565b604051635e0d443f60e01b81526001600482015260006024820152670de0b6b3a7640000604482015273dc24316b9ae028f1497c275eb9192a3ea0f6702290635e0d443f9060640160206040518083038186803b15801561215f57600080fd5b505afa158015612173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121979190613944565b6121a1908a613cc1565b6121ab9190613ce0565b8c6121b86127108b613ce0565b6121c29084613cc1565b6121cc9190613cc1565b6121d6878b613cc1565b6121e890670de0b6b3a7640000613cc1565b6121f29190613ce0565b6121fc9190613ca1565b9c50612218565b80821015612218576122158482613ce0565b9d505b505050505050505050505050915091565b60008181670de0b6b3a76400006122408689613cc1565b61224a9190613ca1565b9050600061271061225b8884613cc1565b6122659190613ca1565b604051632fe4a15f60e21b81523060048201529091506000906001600160a01b0385169063bf92857c9060240160c06040518083038186803b1580156122aa57600080fd5b505afa1580156122be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e29190613987565b50505092505050808211156122f5578091505b50801561259c5760405163a415bcad60e01b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc260048201526024810182905260026044820152600060648201523060848201526001600160a01b0384169063a415bcad9060a401600060405180830381600087803b15801561236c57600080fd5b505af1158015612380573d6000803e3d6000fd5b5050505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b0316632e1a7d4d6123c473c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2612a9b565b6040518263ffffffff1660e01b81526004016123e291815260200190565b600060405180830381600087803b1580156123fc57600080fd5b505af1158015612410573d6000803e3d6000fd5b5050604051630f7c084960e21b81526000600482018190526001602483015247604483018190526064830191909152925073dc24316b9ae028f1497c275eb9192a3ea0f670229150633df021249083906084016020604051808303818588803b15801561247c57600080fd5b505af1158015612490573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906124b59190613944565b5060006124cf600080516020613dcc833981519152612a9b565b905060006124f0731982b2f5814301d4e9a8b0201555376e62f82428612a9b565b60405163e8eda9df60e01b8152600080516020613dcc833981519152600482015260248101849052306044820152600060648201529091506001600160a01b0387169063e8eda9df90608401600060405180830381600087803b15801561255657600080fd5b505af115801561256a573d6000803e3d6000fd5b505050508061258c731982b2f5814301d4e9a8b0201555376e62f82428612a9b565b6125969190613ce0565b96505050505b505050949350505050565b600073dc24316b9ae028f1497c275eb9192a3ea0f670229050600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561260f57600080fd5b505afa158015612623573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612647919061374e565b90506000603b54600261265a9190613cc1565b905060005b81811015612a92576000600188111561276057604051632fe4a15f60e21b8152306004820152600090819081906001600160a01b0388169063bf92857c9060240160c06040518083038186803b1580156126b857600080fd5b505afa1580156126cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f09190613987565b505093505092509250600081111561275c5760008161271161271085613cc1565b61271b9190613ca1565b612726906001613c89565b90508084111561275a578961273b8286613ce0565b61274d90670de0b6b3a7640000613cc1565b6127579190613ca1565b94505b505b5050505b6001811180156127705750600188115b15612a795780888111156127815750875b6402540be400612791828b613ce0565b10156127c65760006127b6731982b2f5814301d4e9a8b0201555376e62f82428612a9b565b9050808211156127c4578091505b505b6127d0818a613ce0565b98506001811115612a7357604051631a4ca37b60e21b8152600080516020613dcc8339815191526004820152602481018290523060448201526001600160a01b038616906369328dec90606401602060405180830381600087803b15801561283757600080fd5b505af115801561284b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286f9190613944565b506000612889600080516020613dcc833981519152612a9b565b604051630f7c084960e21b8152600160048201526000602482018190526044820183905260648201529091506001600160a01b03881690633df0212490608401602060405180830381600087803b1580156128e357600080fd5b505af11580156128f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291b9190613944565b508815612a715788600061294273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee612a9b565b905081811015612950578091505b508015612a6f5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156129a657600080fd5b505af11580156129ba573d6000803e3d6000fd5b505060405163573ade8160e01b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2600482015260248101859052600260448201523060648201526001600160a01b038b16935063573ade8192506084019050602060405180830381600087803b158015612a2957600080fd5b505af1158015612a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a619190613944565b50612a6c818b613ce0565b99505b505b505b50612a7f565b50612a92565b5080612a8a81613d5e565b91505061265f565b50505050505050565b60006001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415612ac9575047612b43565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b158015612b0857600080fd5b505afa158015612b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b409190613944565b90505b919050565b600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b158015612b9757600080fd5b505afa158015612bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bcf919061374e565b60405163b3596f0760e01b8152600080516020613dcc83398151915260048201529091506000906001600160a01b0383169063b3596f079060240160206040518083038186803b158015612c2257600080fd5b505afa158015612c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5a9190613944565b905060008486612c7d731982b2f5814301d4e9a8b0201555376e62f82428612a9b565b612c879190613cc1565b612c919190613ca1565b905060008587612cb473f63b34710400cad3e044cffdcab00a0f32e33ecf612a9b565b612cbe9190613cc1565b612cc89190613ca1565b9050612cd58282856125a7565b6000612cf473c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2612a9b565b90508015612d6257604051632e1a7d4d60e01b81526004810182905273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290632e1a7d4d90602401600060405180830381600087803b158015612d4957600080fd5b505af1158015612d5d573d6000803e3d6000fd5b505050505b5050505050505050565b60005b8251811015611f57576000828281518110612d9a57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000811115612e835773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0316848381518110612deb57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415612e3e576040516001600160a01b0386169082156108fc029083906000818181858888f19350505050158015612e38573d6000803e3d6000fd5b50612e83565b612e838582868581518110612e6357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031661336c9092919063ffffffff16565b5080612e8e81613d5e565b915050612d6f565b60006001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415612ec4575080612f4b565b603454604051632a410b9360e01b81526001600160a01b0385811660048301526024820185905290911690632a410b939060440160206040518083038186803b158015612f1057600080fd5b505afa158015612f24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f489190613944565b90505b92915050565b60008054610100900460ff1615612f98578160ff166001148015612f745750303b155b612f905760405162461bcd60e51b8152600401610b0590613b7e565b506000612b43565b60005460ff808416911610612fbf5760405162461bcd60e51b8152600401610b0590613b7e565b506000805460ff191660ff83161790556001612b43565b80158061305f5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561302557600080fd5b505afa158015613039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305d9190613944565b155b6130ca5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610b05565b6040516001600160a01b0383166024820152604481018290526119e590849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261339c565b6034805461ffff60a01b1916600160a01b61ffff861602179055603380546001600160a01b0319166001600160a01b03861690811790915560408051635c4443cf60e11b8152905163b888879e91600480820192602092909190829003018186803b15801561319b57600080fd5b505afa1580156131af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d3919061374e565b603480546001600160a01b0319166001600160a01b0392831617905560335460408051636771593560e01b81529051613293939290921691636771593591600480820192602092909190829003018186803b15801561323157600080fd5b505afa158015613245573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613269919061374e565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b81516132a69060359060208501906135f1565b5060008151116132ec5760405162461bcd60e51b81526020600482015260116024820152701dd85b9d1cc81a5cc81c995c5d5a5c9959607a1b6044820152606401610b05565b8051610ee3906036906020840190613675565b6000608082106133445760405162461bcd60e51b815260206004820152601060248201526f0aa98be929cac82989288be929c888ab60831b6044820152606401610b05565b61334f826002613cc1565b61335a906001613c89565b83901c60011660001415905092915050565b6040516001600160a01b0383166024820152604481018290526119e590849063a9059cbb60e01b906064016130f6565b60006133f1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661346e9092919063ffffffff16565b8051909150156119e5578080602001905181019061340f91906138eb565b6119e55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b05565b606061347d8484600085613487565b90505b9392505050565b6060824710156134e85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b05565b6001600160a01b0385163b61353f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b05565b600080866001600160a01b0316858760405161355b9190613a42565b60006040518083038185875af1925050503d8060008114613598576040519150601f19603f3d011682016040523d82523d6000602084013e61359d565b606091505b50915091506135ad8282866135b8565b979650505050505050565b606083156135c7575081613480565b8251156135d75782518084602001fd5b8160405162461bcd60e51b8152600401610b059190613b4b565b8280546135fd90613d23565b90600052602060002090601f01602090048101928261361f5760008555613665565b82601f1061363857805160ff1916838001178555613665565b82800160010185558215613665579182015b8281111561366557825182559160200191906001019061364a565b506136719291506136ca565b5090565b828054828255906000526020600020908101928215613665579160200282015b8281111561366557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613695565b5b8082111561367157600081556001016136cb565b600082601f8301126136ef578081fd5b813560206137046136ff83613c65565b613c34565b80838252828201915082860187848660051b8901011115613723578586fd5b855b8581101561374157813584529284019290840190600101613725565b5090979650505050505050565b60006020828403121561375f578081fd5b815161348081613da5565b6000806040838503121561377c578081fd5b823561378781613da5565b915060208381013567ffffffffffffffff808211156137a4578384fd5b818601915086601f8301126137b7578384fd5b8135818111156137c9576137c9613d8f565b6137db601f8201601f19168501613c34565b915080825287848285010111156137f0578485fd5b8084840185840137810190920192909252919491935090915050565b6000806040838503121561381e578182fd5b823567ffffffffffffffff80821115613835578384fd5b818501915085601f830112613848578384fd5b813560206138586136ff83613c65565b8083825282820191508286018a848660051b8901011115613877578889fd5b8896505b848710156138a257803561388e81613da5565b83526001969096019591830191830161387b565b50965050860135925050808211156138b8578283fd5b506138c5858286016136df565b9150509250929050565b6000602082840312156138e0578081fd5b813561348081613dbd565b6000602082840312156138fc578081fd5b815161348081613dbd565b600060208284031215613918578081fd5b6139226020613c34565b9151825250919050565b60006020828403121561393d578081fd5b5035919050565b600060208284031215613955578081fd5b5051919050565b600080600060608486031215613970578081fd5b505081359360208301359350604090920135919050565b60008060008060008060c0878903121561399f578182fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6000815180845260208085019450808401835b83811015613a085781516001600160a01b0316875295820195908201906001016139e3565b509495945050505050565b6000815180845260208085019450808401835b83811015613a0857815187529582019590820190600101613a26565b60008251613a54818460208701613cf7565b9190910192915050565b600060208252612f4860208301846139d0565b600060408252613a8460408301856139d0565b8281036020840152613a968185613a13565b95945050505050565b600060808252613ab260808301876139d0565b8281036020840152613ac48187613a13565b941515604084015250506060015292915050565b60006020808301818452808551808352604092508286019150828160051b870101848801865b83811015613b3d57888303603f19018552815180518452870151878401879052613b2a878501826139d0565b9588019593505090860190600101613afe565b509098975050505050505050565b6000602082528251806020840152613b6a816040850160208701613cf7565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526018908201527f73657474696e67206f7574707574207468652072616e67650000000000000000604082015260600190565b600085825284602083015260806040830152613c2260808301856139d0565b82810360608401526135ad8185613a13565b604051601f8201601f1916810167ffffffffffffffff81118282101715613c5d57613c5d613d8f565b604052919050565b600067ffffffffffffffff821115613c7f57613c7f613d8f565b5060051b60200190565b60008219821115613c9c57613c9c613d79565b500190565b600082613cbc57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613cdb57613cdb613d79565b500290565b600082821015613cf257613cf2613d79565b500390565b60005b83811015613d12578181015183820152602001613cfa565b83811115611f575750506000910152565b600181811c90821680613d3757607f821691505b60208210811415613d5857634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613d7257613d72613d79565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613dba57600080fd5b50565b8015158114613dba57600080fdfe000000000000000000000000ae7ab96520de3a18e5e111b5eaab095312d7fe84a2646970667358221220cf1fe774b51c3f5d05e0cbccda4288bc30bc1b9f31dd434904f06ed4d56b4f9964736f6c63430008030033","deployedBytecode":"0x60806040526004361061021d5760003560e01c80637d7c2a1c11610123578063ad83885f116100ab578063efbb5cb01161006f578063efbb5cb014610640578063f399e22e14610655578063f48c738814610675578063f4f9f7fd14610695578063fbfa77cf146106bd57610224565b8063ad83885f146105be578063adc58dd9146105de578063c292614b146105f3578063d8a8bf5c14610609578063ed65cb001461062b57610224565b80638e479b0c116100f25780638e479b0c1461051a5780638f1f02b31461052f5780638fc745291461054f578063970d44ee1461056f5780639de77d1e1461059957610224565b80637d7c2a1c146104885780637dc71a721461049d578063895a7485146104c55780638ce74426146104e557610224565b806339e5274c116101a6578063677159351161017557806367715935146103e25780636bff31c3146104085780636f94a7211461041e578063775dc046146104485780637d1b623a1461046857610224565b806339e5274c146103625780634641257d1461037557806347ddbcfe1461039857806364440b37146103ba57610224565b80630d8e6e2c116101ed5780630d8e6e2c146102c6578063189e9f88146102f45780631fa8970c14610314578063249d39e91461032a578063338346d21461034057610224565b806240e09b146102265780630504a2881461026b57806306fdde031461028f578063099d1eb0146102b157610224565b3661022457005b005b34801561023257600080fd5b5061024e73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561027757600080fd5b5061028160395481565b604051908152602001610262565b34801561029b57600080fd5b506102a46106dd565b6040516102629190613b4b565b3480156102bd57600080fd5b50610281601f81565b3480156102d257600080fd5b506040805180820190915260058152640312e302e360dc1b60208201526102a4565b34801561030057600080fd5b5061024e61030f36600461392c565b61076b565b34801561032057600080fd5b50610281603a5481565b34801561033657600080fd5b5061028161271081565b34801561034c57600080fd5b5061024e600080516020613dcc83398151915281565b61022461037036600461380c565b610795565b34801561038157600080fd5b5061038a6107f3565b604051610262929190613a71565b3480156103a457600080fd5b506103ad610860565b6040516102629190613ad8565b3480156103c657600080fd5b5061024e73030ba81f1c18d280636f32af80b9aad02cf0854e81565b3480156103ee57600080fd5b5060005461024e906201000090046001600160a01b031681565b34801561041457600080fd5b50610281603b5481565b34801561042a57600080fd5b5061043361093d565b60408051928352602083019190915201610262565b34801561045457600080fd5b5061022461046336600461392c565b610a68565b34801561047457600080fd5b5061022461048336600461392c565b610b4a565b34801561049457600080fd5b50610224610c0d565b3480156104a957600080fd5b5061024e73f63b34710400cad3e044cffdcab00a0f32e33ecf81565b3480156104d157600080fd5b5061038a6104e036600461395c565b610eea565b3480156104f157600080fd5b5060345461050790600160a01b900461ffff1681565b60405161ffff9091168152602001610262565b34801561052657600080fd5b5061028161128d565b34801561053b57600080fd5b5061022461054a36600461392c565b61131c565b34801561055b57600080fd5b5061022461056a3660046138cf565b6113d2565b34801561057b57600080fd5b506037546105899060ff1681565b6040519015158152602001610262565b3480156105a557600080fd5b506105ae611483565b6040516102629493929190613a9f565b3480156105ca57600080fd5b5060345461024e906001600160a01b031681565b3480156105ea57600080fd5b5061038a611604565b3480156105ff57600080fd5b5061028160385481565b34801561061557600080fd5b5061061e6116d4565b6040516102629190613a5e565b34801561063757600080fd5b50600019610281565b34801561064c57600080fd5b50610281611736565b34801561066157600080fd5b5061022461067036600461376a565b6117f7565b34801561068157600080fd5b5061022461069036600461392c565b6119ea565b3480156106a157600080fd5b5061024e731982b2f5814301d4e9a8b0201555376e62f8242881565b3480156106c957600080fd5b5060335461024e906001600160a01b031681565b603580546106ea90613d23565b80601f016020809104026020016040519081016040528092919081815260200182805461071690613d23565b80156107635780601f1061073857610100808354040283529160200191610763565b820191906000526020600020905b81548152906001019060200180831161074657829003601f168201915b505050505081565b6036818154811061077b57600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b031633146107ac57600080fd5b6107b68282611aad565b7fb8979beef99ce8cedd10830934327a8b83c5acffc54693c718ef9e2c91080ec882826040516107e7929190613a71565b60405180910390a15050565b603354604051631e8de77b60e01b815260609182916001600160a01b0390911690631e8de77b9061082a9084908190600401613a71565b600060405180830381600087803b15801561084457600080fd5b505af1158015610858573d6000803e3d6000fd5b505050509091565b604080516001808252818301909252606091816020015b6040805180820190915260008152606060208201528152602001906001900390816108775790505090506000816000815181106108c457634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816000018181525050603680548060200260200160405190810160405280929190818152602001828054801561092f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610911575b505050506020909201525090565b600080600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561098f57600080fd5b505afa1580156109a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c7919061374e565b60405163b3596f0760e01b8152600080516020613dcc83398151915260048201529091506000906001600160a01b0383169063b3596f079060240160206040518083038186803b158015610a1a57600080fd5b505afa158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a529190613944565b9050610a5d81611f5d565b909590945092505050565b600054604051632e22bacf60e01b8152336004820152620100009091046001600160a01b031690632e22bacf9060240160006040518083038186803b158015610ab057600080fd5b505afa158015610ac4573d6000803e3d6000fd5b5050505061271081108015610adb5750603a548110155b8015610ae957506039548111155b610b0e5760405162461bcd60e51b8152600401610b0590613bcc565b60405180910390fd5b60388190556040518181527fa8a7709841b33ad4d0c929fb387a1c191ed2754c7127c4324dcaf7c0b1feb6c9906020015b60405180910390a150565b600054604051632e22bacf60e01b8152336004820152620100009091046001600160a01b031690632e22bacf9060240160006040518083038186803b158015610b9257600080fd5b505afa158015610ba6573d6000803e3d6000fd5b5050505061271081108015610bbc575060385481115b610bd85760405162461bcd60e51b8152600401610b0590613bcc565b60398190556040518181527ff98b2d5c625a7a24d45fbccf6d5cf245c902aed5191f5d9a82664431950d88a690602001610b3f565b6000546040516311aec98d60e01b8152336004820152620100009091046001600160a01b0316906311aec98d90602401600060405180830381600087803b158015610c5757600080fd5b505af1158015610c6b573d6000803e3d6000fd5b50505050600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cbe57600080fd5b505afa158015610cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf6919061374e565b9050600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4757600080fd5b505afa158015610d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7f919061374e565b60405163b3596f0760e01b8152600080516020613dcc83398151915260048201529091506000906001600160a01b0383169063b3596f079060240160206040518083038186803b158015610dd257600080fd5b505afa158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0a9190613944565b9050600080610e1883611f5d565b91509150600a821115610e7357603b546038548360005b83811015610e6a57600a821115610e5357610e4c8284898c612229565b9150610e58565b610e6a565b80610e6281613d5e565b915050610e2f565b50505050610e97565b8015610e9757806000610e87826003613cc1565b9050610e948282876125a7565b50505b6000610ea38284613c89565b1115610ee35760408051838152602081018390527f0b33d39bbef101ecc4f5ef04e6d3a125c9fb745a418dac380e2a9460f8200dc8910160405180910390a15b5050505050565b60335460609081906001600160a01b03163314610f0657600080fd5b60026001541415610f595760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b05565b60026001558415801590610f6d5750848410155b610fb15760405162461bcd60e51b815260206004820152601560248201527463616e6e6f7420726570617920302073686172657360581b6044820152606401610b05565b603680548060200260200160405190810160405280929190818152602001828054801561100757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610fe9575b505050505091506000825167ffffffffffffffff81111561103857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611061578160200160208202803683370190505b50905060005b83518110156110dd576110a084828151811061109357634e487b7160e01b600052603260045260246000fd5b6020026020010151612a9b565b8282815181106110c057634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806110d581613d5e565b915050611067565b506110e9868686612b48565b825167ffffffffffffffff81111561111157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561113a578160200160208202803683370190505b50915060005b835181101561122957600061116e85838151811061109357634e487b7160e01b600052603260045260246000fd5b9050868884848151811061119257634e487b7160e01b600052603260045260246000fd5b60200260200101516111a49190613cc1565b6111ae9190613ca1565b8383815181106111ce57634e487b7160e01b600052603260045260246000fd5b6020026020010151826111e19190613ce0565b6111eb9190613c89565b84838151811061120b57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152508061122181613d5e565b915050611140565b50603354611241906001600160a01b03168484612d6c565b7f4f80ed973ad44caebda6b6d59164f6f2229a654b3790513fe6c96957d1c9207e868685856040516112769493929190613c03565b60405180910390a150600180559094909350915050565b6000611317600080516020613dcc833981519152806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112da57600080fd5b505afa1580156112ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113129190613944565b612e96565b905090565b600054604051632e22bacf60e01b8152336004820152620100009091046001600160a01b031690632e22bacf9060240160006040518083038186803b15801561136457600080fd5b505afa158015611378573d6000803e3d6000fd5b50505050600a81111561139d5760405162461bcd60e51b8152600401610b0590613bcc565b603b8190556040518181527f0cdc341e082dbd0a46614b1d9c2f4eef310ba014b58b1335b5b0f1762392669290602001610b3f565b600054604051632e22bacf60e01b8152336004820152620100009091046001600160a01b031690632e22bacf9060240160006040518083038186803b15801561141a57600080fd5b505afa15801561142e573d6000803e3d6000fd5b50506037805484151560ff19821681179092556040805160ff909216801515835260208301939093529193507f748cca965f8cddafc66f534e5ea09ded831ccf043014eda1673ea057aa0192d49250016107e7565b60608060008060368054806020026020016040519081016040528092919081815260200182805480156114df57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116114c1575b50939750600193506114f092505050565b604051908082528060200260200182016040528015611519578160200160208202803683370190505b509250600061153b73f63b34710400cad3e044cffdcab00a0f32e33ecf612a9b565b9050600061155c73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee612a9b565b61157973c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2612a9b565b6115839190613c89565b9050600061159e600080516020613dcc833981519152612a9b565b6115bb731982b2f5814301d4e9a8b0201555376e62f82428612a9b565b6115c59190613c89565b90506001945082826115e5600080516020613dcc83398151915284612e96565b6115ef9190613c89565b6115f99190613ce0565b935050505090919293565b606080603680548060200260200160405190810160405280929190818152602001828054801561165d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161163f575b509395506001935061166e92505050565b604051908082528060200260200182016040528015611697578160200160208202803683370190505b509050670de0b6b3a7640000816000815181106116c457634e487b7160e01b600052603260045260246000fd5b6020026020010181815250509091565b6060603680548060200260200160405190810160405280929190818152602001828054801561172c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161170e575b5050505050905090565b6000806000806000611746611483565b9350935093509350811561175c578094506117f0565b60005b84518110156117ee57600084828151811061178a57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008111156117db576117ce8683815181106117c057634e487b7160e01b600052603260045260246000fd5b602002602001015182612e96565b6117d89088613c89565b96505b50806117e681613d5e565b91505061175f565b505b5050505090565b60006118036001612f51565b9050801561181b576000805461ff0019166101001790555b6040805160018082528183019092526000916020808301908036833701905050905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8160008151811061187357634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101820152611a2c603855611964603a55611af46039556003603b5560408051630261bf8b60e01b8152905160009273b53c1a33016b2dc2ff3653530bff1848a515c8c592630261bf8b9260048083019392829003018186803b1580156118eb57600080fd5b505afa1580156118ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611923919061374e565b9050611940600080516020613dcc83398151915282600019612fd6565b61196173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc282600019612fd6565b611990600080516020613dcc83398151915273dc24316b9ae028f1497c275eb9192a3ea0f67022600019612fd6565b61199d856007868561312d565b505080156119e5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600054604051632e22bacf60e01b8152336004820152620100009091046001600160a01b031690632e22bacf9060240160006040518083038186803b158015611a3257600080fd5b505afa158015611a46573d6000803e3d6000fd5b5050505061271081108015611a5c575060385481105b611a785760405162461bcd60e51b8152600401610b0590613bcc565b603a8190556040518181527f5a034ae82b3b759c632314559ed0f79bd3b337c742eebd009e8ef8cf3950a4c290602001610b3f565b600081600081518110611ad057634e487b7160e01b600052603260045260246000fd5b6020908102919091010151604051630f7c084960e21b81526000600482018190526001602483015260448201839052606482015290915073dc24316b9ae028f1497c275eb9192a3ea0f6702290633df021249083906084016020604051808303818588803b158015611b4157600080fd5b505af1158015611b55573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611b7a9190613944565b506000611b94600080516020613dcc833981519152612a9b565b90508015611f5757600080600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bee57600080fd5b505afa158015611c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c26919061374e565b90506000819050600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7c57600080fd5b505afa158015611c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb4919061374e565b60405163b3596f0760e01b8152600080516020613dcc83398151915260048201529091506001600160a01b0382169063b3596f079060240160206040518083038186803b158015611d0457600080fd5b505afa158015611d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3c9190613944565b93506000611d5d731982b2f5814301d4e9a8b0201555376e62f82428612a9b565b60405163e8eda9df60e01b8152600080516020613dcc833981519152600482015260248101899052306044820152600060648201529091506001600160a01b0384169063e8eda9df90608401600060405180830381600087803b158015611dc357600080fd5b505af1158015611dd7573d6000803e3d6000fd5b5050604051634417a58360e01b8152306004820152600092506001600160a01b0387169150634417a5839060240160206040518083038186803b158015611e1d57600080fd5b505afa158015611e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e559190613907565b519050611e6381601f6132ff565b611ed657604051635a3b74b960e01b8152600080516020613dcc8339815191526004820152600160248201526001600160a01b03861690635a3b74b990604401600060405180830381600087803b158015611ebd57600080fd5b505af1158015611ed1573d6000803e3d6000fd5b505050505b5080611ef5731982b2f5814301d4e9a8b0201555376e62f82428612a9b565b611eff9190613ce0565b603b5460385491975093509150600090505b82811015611f5057600a861115611f39576000611f3087848888612229565b9650611f3e9050565b611f50565b80611f4881613d5e565b915050611f11565b5050505050505b50505050565b603854603954603a54603b5460009384938693919290919061271090819081908190819081908b5b8181101561200e57612710611f9a8c87613cc1565b611fa49190613ca1565b9450611fb08589613c89565b9750612710611fbf8b86613cc1565b611fc99190613ca1565b9350611fd58488613c89565b9650612710611fe48a85613cc1565b611fee9190613ca1565b9250611ffa8387613c89565b95508061200681613d5e565b915050611f85565b5050505050600061203273f63b34710400cad3e044cffdcab00a0f32e33ecf612a9b565b905060008080808b61204c86670de0b6b3a7640000613cc1565b6120569190613ca1565b905061206461271089613ce0565b61206e8983613cc1565b6120789190613ca1565b935061208661271088613ce0565b6120908883613cc1565b61209a9190613ca1565b92506120a861271087613ce0565b6120b28783613cc1565b6120bc9190613ca1565b91505060006120de731982b2f5814301d4e9a8b0201555376e62f82428612a9b565b905080831115612203578b6120f56127108a613ce0565b6120ff9190613cc1565b604051635e0d443f60e01b81526001600482015260006024820152670de0b6b3a7640000604482015273dc24316b9ae028f1497c275eb9192a3ea0f6702290635e0d443f9060640160206040518083038186803b15801561215f57600080fd5b505afa158015612173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121979190613944565b6121a1908a613cc1565b6121ab9190613ce0565b8c6121b86127108b613ce0565b6121c29084613cc1565b6121cc9190613cc1565b6121d6878b613cc1565b6121e890670de0b6b3a7640000613cc1565b6121f29190613ce0565b6121fc9190613ca1565b9c50612218565b80821015612218576122158482613ce0565b9d505b505050505050505050505050915091565b60008181670de0b6b3a76400006122408689613cc1565b61224a9190613ca1565b9050600061271061225b8884613cc1565b6122659190613ca1565b604051632fe4a15f60e21b81523060048201529091506000906001600160a01b0385169063bf92857c9060240160c06040518083038186803b1580156122aa57600080fd5b505afa1580156122be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e29190613987565b50505092505050808211156122f5578091505b50801561259c5760405163a415bcad60e01b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc260048201526024810182905260026044820152600060648201523060848201526001600160a01b0384169063a415bcad9060a401600060405180830381600087803b15801561236c57600080fd5b505af1158015612380573d6000803e3d6000fd5b5050505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b0316632e1a7d4d6123c473c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2612a9b565b6040518263ffffffff1660e01b81526004016123e291815260200190565b600060405180830381600087803b1580156123fc57600080fd5b505af1158015612410573d6000803e3d6000fd5b5050604051630f7c084960e21b81526000600482018190526001602483015247604483018190526064830191909152925073dc24316b9ae028f1497c275eb9192a3ea0f670229150633df021249083906084016020604051808303818588803b15801561247c57600080fd5b505af1158015612490573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906124b59190613944565b5060006124cf600080516020613dcc833981519152612a9b565b905060006124f0731982b2f5814301d4e9a8b0201555376e62f82428612a9b565b60405163e8eda9df60e01b8152600080516020613dcc833981519152600482015260248101849052306044820152600060648201529091506001600160a01b0387169063e8eda9df90608401600060405180830381600087803b15801561255657600080fd5b505af115801561256a573d6000803e3d6000fd5b505050508061258c731982b2f5814301d4e9a8b0201555376e62f82428612a9b565b6125969190613ce0565b96505050505b505050949350505050565b600073dc24316b9ae028f1497c275eb9192a3ea0f670229050600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561260f57600080fd5b505afa158015612623573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612647919061374e565b90506000603b54600261265a9190613cc1565b905060005b81811015612a92576000600188111561276057604051632fe4a15f60e21b8152306004820152600090819081906001600160a01b0388169063bf92857c9060240160c06040518083038186803b1580156126b857600080fd5b505afa1580156126cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f09190613987565b505093505092509250600081111561275c5760008161271161271085613cc1565b61271b9190613ca1565b612726906001613c89565b90508084111561275a578961273b8286613ce0565b61274d90670de0b6b3a7640000613cc1565b6127579190613ca1565b94505b505b5050505b6001811180156127705750600188115b15612a795780888111156127815750875b6402540be400612791828b613ce0565b10156127c65760006127b6731982b2f5814301d4e9a8b0201555376e62f82428612a9b565b9050808211156127c4578091505b505b6127d0818a613ce0565b98506001811115612a7357604051631a4ca37b60e21b8152600080516020613dcc8339815191526004820152602481018290523060448201526001600160a01b038616906369328dec90606401602060405180830381600087803b15801561283757600080fd5b505af115801561284b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286f9190613944565b506000612889600080516020613dcc833981519152612a9b565b604051630f7c084960e21b8152600160048201526000602482018190526044820183905260648201529091506001600160a01b03881690633df0212490608401602060405180830381600087803b1580156128e357600080fd5b505af11580156128f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291b9190613944565b508815612a715788600061294273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee612a9b565b905081811015612950578091505b508015612a6f5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156129a657600080fd5b505af11580156129ba573d6000803e3d6000fd5b505060405163573ade8160e01b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2600482015260248101859052600260448201523060648201526001600160a01b038b16935063573ade8192506084019050602060405180830381600087803b158015612a2957600080fd5b505af1158015612a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a619190613944565b50612a6c818b613ce0565b99505b505b505b50612a7f565b50612a92565b5080612a8a81613d5e565b91505061265f565b50505050505050565b60006001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415612ac9575047612b43565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b158015612b0857600080fd5b505afa158015612b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b409190613944565b90505b919050565b600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b158015612b9757600080fd5b505afa158015612bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bcf919061374e565b60405163b3596f0760e01b8152600080516020613dcc83398151915260048201529091506000906001600160a01b0383169063b3596f079060240160206040518083038186803b158015612c2257600080fd5b505afa158015612c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5a9190613944565b905060008486612c7d731982b2f5814301d4e9a8b0201555376e62f82428612a9b565b612c879190613cc1565b612c919190613ca1565b905060008587612cb473f63b34710400cad3e044cffdcab00a0f32e33ecf612a9b565b612cbe9190613cc1565b612cc89190613ca1565b9050612cd58282856125a7565b6000612cf473c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2612a9b565b90508015612d6257604051632e1a7d4d60e01b81526004810182905273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290632e1a7d4d90602401600060405180830381600087803b158015612d4957600080fd5b505af1158015612d5d573d6000803e3d6000fd5b505050505b5050505050505050565b60005b8251811015611f57576000828281518110612d9a57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000811115612e835773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0316848381518110612deb57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415612e3e576040516001600160a01b0386169082156108fc029083906000818181858888f19350505050158015612e38573d6000803e3d6000fd5b50612e83565b612e838582868581518110612e6357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031661336c9092919063ffffffff16565b5080612e8e81613d5e565b915050612d6f565b60006001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415612ec4575080612f4b565b603454604051632a410b9360e01b81526001600160a01b0385811660048301526024820185905290911690632a410b939060440160206040518083038186803b158015612f1057600080fd5b505afa158015612f24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f489190613944565b90505b92915050565b60008054610100900460ff1615612f98578160ff166001148015612f745750303b155b612f905760405162461bcd60e51b8152600401610b0590613b7e565b506000612b43565b60005460ff808416911610612fbf5760405162461bcd60e51b8152600401610b0590613b7e565b506000805460ff191660ff83161790556001612b43565b80158061305f5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561302557600080fd5b505afa158015613039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305d9190613944565b155b6130ca5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610b05565b6040516001600160a01b0383166024820152604481018290526119e590849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261339c565b6034805461ffff60a01b1916600160a01b61ffff861602179055603380546001600160a01b0319166001600160a01b03861690811790915560408051635c4443cf60e11b8152905163b888879e91600480820192602092909190829003018186803b15801561319b57600080fd5b505afa1580156131af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d3919061374e565b603480546001600160a01b0319166001600160a01b0392831617905560335460408051636771593560e01b81529051613293939290921691636771593591600480820192602092909190829003018186803b15801561323157600080fd5b505afa158015613245573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613269919061374e565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b81516132a69060359060208501906135f1565b5060008151116132ec5760405162461bcd60e51b81526020600482015260116024820152701dd85b9d1cc81a5cc81c995c5d5a5c9959607a1b6044820152606401610b05565b8051610ee3906036906020840190613675565b6000608082106133445760405162461bcd60e51b815260206004820152601060248201526f0aa98be929cac82989288be929c888ab60831b6044820152606401610b05565b61334f826002613cc1565b61335a906001613c89565b83901c60011660001415905092915050565b6040516001600160a01b0383166024820152604481018290526119e590849063a9059cbb60e01b906064016130f6565b60006133f1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661346e9092919063ffffffff16565b8051909150156119e5578080602001905181019061340f91906138eb565b6119e55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b05565b606061347d8484600085613487565b90505b9392505050565b6060824710156134e85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b05565b6001600160a01b0385163b61353f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b05565b600080866001600160a01b0316858760405161355b9190613a42565b60006040518083038185875af1925050503d8060008114613598576040519150601f19603f3d011682016040523d82523d6000602084013e61359d565b606091505b50915091506135ad8282866135b8565b979650505050505050565b606083156135c7575081613480565b8251156135d75782518084602001fd5b8160405162461bcd60e51b8152600401610b059190613b4b565b8280546135fd90613d23565b90600052602060002090601f01602090048101928261361f5760008555613665565b82601f1061363857805160ff1916838001178555613665565b82800160010185558215613665579182015b8281111561366557825182559160200191906001019061364a565b506136719291506136ca565b5090565b828054828255906000526020600020908101928215613665579160200282015b8281111561366557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613695565b5b8082111561367157600081556001016136cb565b600082601f8301126136ef578081fd5b813560206137046136ff83613c65565b613c34565b80838252828201915082860187848660051b8901011115613723578586fd5b855b8581101561374157813584529284019290840190600101613725565b5090979650505050505050565b60006020828403121561375f578081fd5b815161348081613da5565b6000806040838503121561377c578081fd5b823561378781613da5565b915060208381013567ffffffffffffffff808211156137a4578384fd5b818601915086601f8301126137b7578384fd5b8135818111156137c9576137c9613d8f565b6137db601f8201601f19168501613c34565b915080825287848285010111156137f0578485fd5b8084840185840137810190920192909252919491935090915050565b6000806040838503121561381e578182fd5b823567ffffffffffffffff80821115613835578384fd5b818501915085601f830112613848578384fd5b813560206138586136ff83613c65565b8083825282820191508286018a848660051b8901011115613877578889fd5b8896505b848710156138a257803561388e81613da5565b83526001969096019591830191830161387b565b50965050860135925050808211156138b8578283fd5b506138c5858286016136df565b9150509250929050565b6000602082840312156138e0578081fd5b813561348081613dbd565b6000602082840312156138fc578081fd5b815161348081613dbd565b600060208284031215613918578081fd5b6139226020613c34565b9151825250919050565b60006020828403121561393d578081fd5b5035919050565b600060208284031215613955578081fd5b5051919050565b600080600060608486031215613970578081fd5b505081359360208301359350604090920135919050565b60008060008060008060c0878903121561399f578182fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6000815180845260208085019450808401835b83811015613a085781516001600160a01b0316875295820195908201906001016139e3565b509495945050505050565b6000815180845260208085019450808401835b83811015613a0857815187529582019590820190600101613a26565b60008251613a54818460208701613cf7565b9190910192915050565b600060208252612f4860208301846139d0565b600060408252613a8460408301856139d0565b8281036020840152613a968185613a13565b95945050505050565b600060808252613ab260808301876139d0565b8281036020840152613ac48187613a13565b941515604084015250506060015292915050565b60006020808301818452808551808352604092508286019150828160051b870101848801865b83811015613b3d57888303603f19018552815180518452870151878401879052613b2a878501826139d0565b9588019593505090860190600101613afe565b509098975050505050505050565b6000602082528251806020840152613b6a816040850160208701613cf7565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526018908201527f73657474696e67206f7574707574207468652072616e67650000000000000000604082015260600190565b600085825284602083015260806040830152613c2260808301856139d0565b82810360608401526135ad8185613a13565b604051601f8201601f1916810167ffffffffffffffff81118282101715613c5d57613c5d613d8f565b604052919050565b600067ffffffffffffffff821115613c7f57613c7f613d8f565b5060051b60200190565b60008219821115613c9c57613c9c613d79565b500190565b600082613cbc57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613cdb57613cdb613d79565b500290565b600082821015613cf257613cf2613d79565b500390565b60005b83811015613d12578181015183820152602001613cfa565b83811115611f575750506000910152565b600181811c90821680613d3757607f821691505b60208210811415613d5857634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613d7257613d72613d79565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613dba57600080fd5b50565b8015158114613dba57600080fdfe000000000000000000000000ae7ab96520de3a18e5e111b5eaab095312d7fe84a2646970667358221220cf1fe774b51c3f5d05e0cbccda4288bc30bc1b9f31dd434904f06ed4d56b4f9964736f6c63430008030033","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"_assets","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"_amounts","type":"uint256[]"}],"name":"Borrow","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_remainingAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_overflowAmount","type":"uint256"}],"name":"Rebalance","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_withdrawShares","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_totalShares","type":"uint256"},{"indexed":false,"internalType":"address[]","name":"_assets","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"_amounts","type":"uint256[]"}],"name":"Repay","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"_oldValue","type":"bool"},{"indexed":false,"internalType":"bool","name":"_newValue","type":"bool"}],"name":"SetIsWantRatioIgnorable","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_strategy","type":"address"},{"indexed":false,"internalType":"address[]","name":"_rewards","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"_rewardAmounts","type":"uint256[]"},{"indexed":false,"internalType":"address[]","name":"_wants","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"_wantAmounts","type":"uint256[]"}],"name":"SwapRewardsToWants","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_borrowCount","type":"uint256"}],"name":"UpdateBorrowCount","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_borrowFactor","type":"uint256"}],"name":"UpdateBorrowFactor","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_borrowFactorMax","type":"uint256"}],"name":"UpdateBorrowFactorMax","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_borrowFactorMin","type":"uint256"}],"name":"UpdateBorrowFactorMin","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"A_ST_ETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"A_WETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BPS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEBT_W_ETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"RESERVE_ID_OF_ST_ETH","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ST_ETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"W_ETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"accessControlProxy","outputs":[{"internalType":"contract IAccessControlProxy","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_assets","type":"address[]"},{"internalType":"uint256[]","name":"_amounts","type":"uint256[]"}],"name":"borrow","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"borrowCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"borrowFactor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"borrowFactorMax","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"borrowFactorMin","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"borrowInfo","outputs":[{"internalType":"uint256","name":"_remainingAmount","type":"uint256"},{"internalType":"uint256","name":"_overflowAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"estimatedTotalAssets","outputs":[{"internalType":"uint256","name":"_assetsInETH","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"get3rdPoolAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getOutputsInfo","outputs":[{"components":[{"internalType":"uint256","name":"outputCode","type":"uint256"},{"internalType":"address[]","name":"outputTokens","type":"address[]"}],"internalType":"struct ETHBaseStrategy.OutputInfo[]","name":"_outputsInfo","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPositionDetail","outputs":[{"internalType":"address[]","name":"_tokens","type":"address[]"},{"internalType":"uint256[]","name":"_amounts","type":"uint256[]"},{"internalType":"bool","name":"_isETH","type":"bool"},{"internalType":"uint256","name":"_ethValue","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVersion","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getWants","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getWantsInfo","outputs":[{"internalType":"address[]","name":"_assets","type":"address[]"},{"internalType":"uint256[]","name":"_ratios","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"harvest","outputs":[{"internalType":"address[]","name":"_rewardsTokens","type":"address[]"},{"internalType":"uint256[]","name":"_claimAmounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vault","type":"address"},{"internalType":"string","name":"_name","type":"string"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isWantRatioIgnorable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"poolQuota","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"priceOracleConsumer","outputs":[{"internalType":"contract IPriceOracleConsumer","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocol","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rebalance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_repayShares","type":"uint256"},{"internalType":"uint256","name":"_totalShares","type":"uint256"},{"internalType":"uint256","name":"_outputCode","type":"uint256"}],"name":"repay","outputs":[{"internalType":"address[]","name":"_assets","type":"address[]"},{"internalType":"uint256[]","name":"_amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_borrowCount","type":"uint256"}],"name":"setBorrowCount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_borrowFactor","type":"uint256"}],"name":"setBorrowFactor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_borrowFactorMax","type":"uint256"}],"name":"setBorrowFactorMax","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_borrowFactorMin","type":"uint256"}],"name":"setBorrowFactorMin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_isWantRatioIgnorable","type":"bool"}],"name":"setIsWantRatioIgnorable","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"contract IETHVault","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"wants","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}]}